{"file_contents":{"App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/components/language-provider\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport Home from \"@/pages/home\";\nimport ChatbotProduct from \"@/pages/chatbot-product\";\nimport RecruitingProduct from \"@/pages/recruiting-product\";\nimport NotFound from \"@/pages/not-found\";\nimport AISolutionsPage from \"@/pages/ai-solutions\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport ManageProducts from \"@/pages/admin-products\";\nimport EditHeroSection from \"@/pages/admin-hero\";\nimport EditPricing from \"@/pages/admin-pricing\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/chatbot\" component={ChatbotProduct} />\n      <Route path=\"/recruiting\" component={RecruitingProduct} />\n  <Route path=\"/ai-solutions\" component={AISolutionsPage} />\n  <Route path=\"/admin\" component={AdminDashboard} />\n  <Route path=\"/admin/products\" component={ManageProducts} />\n  <Route path=\"/admin/hero\" component={EditHeroSection} />\n  <Route path=\"/admin/pricing\" component={EditPricing} />\n  <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <LanguageProvider>\n          <div className=\"min-h-screen flex flex-col\">\n            <Navbar />\n            <main className=\"flex-1\">\n              <Router />\n            </main>\n            <Footer />\n          </div>\n          <Toaster />\n        </LanguageProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1882},"accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"admin-dashboard.tsx":{"content":"import React from \"react\";\n\nexport default function AdminDashboard() {\n  return (\n    <div className=\"max-w-4xl mx-auto py-12 px-4\">\n      <h1 className=\"text-3xl font-bold mb-6\">Admin Dashboard</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <a href=\"/admin/products\" className=\"block border rounded-lg p-6 shadow-sm bg-white hover:bg-gray-50\">\n          <h2 className=\"text-xl font-semibold mb-2\">Manage Products</h2>\n          <p>Edit, add, or remove products and thumbnails.</p>\n        </a>\n        <a href=\"/admin/hero\" className=\"block border rounded-lg p-6 shadow-sm bg-white hover:bg-gray-50\">\n          <h2 className=\"text-xl font-semibold mb-2\">Edit Hero Section</h2>\n          <p>Change homepage hero titles and descriptions.</p>\n        </a>\n        <a href=\"/admin/pricing\" className=\"block border rounded-lg p-6 shadow-sm bg-white hover:bg-gray-50\">\n          <h2 className=\"text-xl font-semibold mb-2\">Change Pricing</h2>\n          <p>Update pricing for all products and solutions.</p>\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1073},"admin-hero.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function EditHeroSection() {\n  const { toast } = useToast();\n  const [hero, setHero] = useState({ title: '', subtitle: '' });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch('/api/hero').then(res => res.json()).then(setHero);\n  }, []);\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setHero(h => ({ ...h, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const res = await fetch('/api/hero', {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(hero),\n    });\n    if (res.ok) {\n  toast({ title: 'Hero section updated!', variant: 'default' });\n    } else {\n      toast({ title: 'Error', description: 'Failed to update hero section', variant: 'destructive' });\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <AdminSidebar />\n      <div className=\"flex-1 max-w-2xl mx-auto py-12 px-4\">\n        <h1 className=\"text-2xl font-bold mb-6\">Edit Hero Section</h1>\n        <form className=\"space-y-4\" onSubmit={handleSubmit}>\n          <input name=\"title\" value={hero.title} onChange={handleInput} placeholder=\"Hero Title\" className=\"border p-2 rounded w-full\" required />\n          <textarea name=\"subtitle\" value={hero.subtitle} onChange={handleInput} placeholder=\"Hero Subtitle\" className=\"border p-2 rounded w-full\" required />\n          <button type=\"submit\" className=\"bg-primary text-white px-4 py-2 rounded\" disabled={loading}>\n            Save\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1877},"admin-pricing.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PricingItem {\n  id: string;\n  name: string;\n  price: number;\n}\n\nexport default function EditPricing() {\n  const { toast } = useToast();\n  const [pricing, setPricing] = useState<PricingItem[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch('/api/pricing').then(res => res.json()).then(setPricing);\n  }, []);\n\n  const handlePriceChange = (id: string, value: string) => {\n    setPricing(pricing => pricing.map(item => item.id === id ? { ...item, price: Number(value) } : item));\n  };\n\n  const handleSave = async (id: string) => {\n    setLoading(true);\n    const item = pricing.find(p => p.id === id);\n    if (!item) return;\n    const res = await fetch(`/api/pricing/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ price: item.price }),\n    });\n    if (res.ok) {\n      toast({ title: 'Pricing updated!', variant: 'default' });\n      // Refresh pricing\n      fetch('/api/pricing').then(res => res.json()).then(setPricing);\n    } else {\n      toast({ title: 'Error', description: 'Failed to update pricing', variant: 'destructive' });\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <AdminSidebar />\n      <div className=\"flex-1 max-w-2xl mx-auto py-12 px-4\">\n        <h1 className=\"text-2xl font-bold mb-6\">Edit Pricing</h1>\n        <div className=\"space-y-4\">\n          {pricing.map(item => (\n            <div key={item.id} className=\"flex items-center gap-4 border rounded p-4\">\n              <div className=\"flex-1 font-semibold\">{item.name}</div>\n              <input\n                type=\"number\"\n                value={item.price}\n                onChange={e => handlePriceChange(item.id, e.target.value)}\n                className=\"border p-2 rounded w-32\"\n              />\n              <button\n                className=\"bg-primary text-white px-4 py-2 rounded\"\n                onClick={() => handleSave(item.id)}\n                disabled={loading}\n              >\n                Save\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2310},"admin-products.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  thumbnail: string;\n}\n\nexport default function ManageProducts() {\n  const { toast } = useToast();\n  const [products, setProducts] = useState<Product[]>([]);\n  const [form, setForm] = useState<Partial<Product> & { file?: File | null }>({ name: '', description: '', price: 0, file: null });\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const fetchProducts = async () => {\n    const res = await fetch('/api/products');\n    setProducts(await res.json());\n  };\n\n  useEffect(() => { fetchProducts(); }, []);\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, files } = e.target as any;\n    if (name === 'file') {\n      setForm(f => ({ ...f, file: files[0] }));\n    } else {\n      setForm(f => ({ ...f, [name]: value }));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('name', form.name || '');\n    formData.append('description', form.description || '');\n    formData.append('price', String(form.price || 0));\n    if (form.file) formData.append('thumbnail', form.file);\n    const method = editingId ? 'PUT' : 'POST';\n    const url = editingId ? `/api/products/${editingId}` : '/api/products';\n    const res = await fetch(url, { method, body: formData });\n    if (res.ok) {\n      toast({ title: editingId ? 'Product updated!' : 'Product added!', variant: 'success' });\n      setForm({ name: '', description: '', price: 0, file: null });\n      setEditingId(null);\n      fetchProducts();\n    } else {\n      toast({ title: 'Error', description: 'Failed to save product', variant: 'destructive' });\n    }\n    setLoading(false);\n  };\n\n  const handleEdit = (product: Product) => {\n    setForm({ ...product, file: null });\n    setEditingId(product.id);\n  };\n\n  const handleDelete = async (id: string) => {\n    const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });\n    if (res.ok) {\n      toast({ title: 'Product deleted!', variant: 'success' });\n      fetchProducts();\n    } else {\n      toast({ title: 'Error', description: 'Failed to delete product', variant: 'destructive' });\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <AdminSidebar />\n      <div className=\"flex-1 max-w-3xl mx-auto py-12 px-4\">\n        <h1 className=\"text-2xl font-bold mb-6\">Manage Products</h1>\n        <form className=\"mb-8 space-y-4\" onSubmit={handleSubmit}>\n          <input name=\"name\" value={form.name || ''} onChange={handleInput} placeholder=\"Product Name\" className=\"border p-2 rounded w-full\" required />\n          <textarea name=\"description\" value={form.description || ''} onChange={handleInput} placeholder=\"Description\" className=\"border p-2 rounded w-full\" required />\n          <input name=\"price\" type=\"number\" value={form.price || 0} onChange={handleInput} placeholder=\"Price\" className=\"border p-2 rounded w-full\" required />\n          <input name=\"file\" type=\"file\" accept=\"image/*\" onChange={handleInput} className=\"w-full\" />\n          <button type=\"submit\" className=\"bg-primary text-white px-4 py-2 rounded\" disabled={loading}>\n            {editingId ? 'Update Product' : 'Add Product'}\n          </button>\n          {editingId && (\n            <button type=\"button\" className=\"ml-2 text-sm underline\" onClick={() => { setEditingId(null); setForm({ name: '', description: '', price: 0, file: null }); }}>Cancel</button>\n          )}\n        </form>\n        <div className=\"grid gap-6\">\n          {products.map(product => (\n            <div key={product.id} className=\"border rounded-lg p-4 flex items-center gap-4\">\n              {product.thumbnail && <img src={product.thumbnail} alt={product.name} className=\"w-20 h-20 object-cover rounded\" />}\n              <div className=\"flex-1\">\n                <div className=\"font-bold\">{product.name}</div>\n                <div className=\"text-sm text-muted-foreground\">{product.description}</div>\n                <div className=\"text-primary font-semibold mt-1\">${product.price}</div>\n              </div>\n              <button className=\"text-blue-600 mr-2\" onClick={() => handleEdit(product)}>Edit</button>\n              <button className=\"text-red-600\" onClick={() => handleDelete(product.id)}>Delete</button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4672},"admin-sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\n\nconst links = [\n  { href: '/admin', label: 'Dashboard' },\n  { href: '/admin/products', label: 'Products' },\n  { href: '/admin/hero', label: 'Hero Section' },\n  { href: '/admin/pricing', label: 'Pricing' },\n];\n\nexport function AdminSidebar() {\n  const [location] = useLocation();\n  return (\n    <aside className=\"w-64 min-h-screen bg-gray-50 border-r px-4 py-8 flex flex-col gap-2\">\n      <div className=\"text-2xl font-bold mb-8 text-primary\">Admin Panel</div>\n      {links.map(link => (\n        <Link\n          key={link.href}\n          href={link.href}\n          className={`block px-4 py-2 rounded hover:bg-primary/10 transition-colors font-medium ${location === link.href ? 'bg-primary/10 text-primary' : 'text-gray-700'}`}\n        >\n          {link.label}\n        </Link>\n      ))}\n    </aside>\n  );\n}\n","size_bytes":851},"ai-solutions.tsx":{"content":"import React from \"react\";\n\nconst aiSolutions = [\n  {\n    name: \"AI Chatbot\",\n    description: \"24/7 customer support and lead generation with advanced AI.\",\n    price: \"$49/mo\",\n  },\n  {\n    name: \"AI Analytics\",\n    description: \"Business insights and analytics powered by AI.\",\n    price: \"$99/mo\",\n  },\n  {\n    name: \"AI Content Generator\",\n    description: \"Automate blog, ad, and social content creation.\",\n    price: \"$29/mo\",\n  },\n];\n\nexport default function AISolutionsPage() {\n  return (\n    <div className=\"max-w-3xl mx-auto py-12 px-4\">\n      <h1 className=\"text-3xl font-bold mb-6\">AI Solutions & Pricing</h1>\n      <div className=\"space-y-6\">\n        {aiSolutions.map((sol) => (\n          <div key={sol.name} className=\"border rounded-lg p-6 shadow-sm bg-white\">\n            <h2 className=\"text-xl font-semibold mb-2\">{sol.name}</h2>\n            <p className=\"mb-2\">{sol.description}</p>\n            <div className=\"text-lg font-bold text-blue-600\">{sol.price}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1041},"alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"chat-demo.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card } from '@/components/ui/card';\nimport { sendChatMessage, type ChatMessage } from '@/lib/openai';\nimport { Bot, Send, User } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function ChatDemo() {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      role: 'assistant',\n      content: \"Hello! I'm your AI business assistant. I can help you with inventory, orders, and customer inquiries. What would you like to know?\",\n    },\n  ]);\n  const [input, setInput] = useState('');\n  const [sessionId, setSessionId] = useState<string>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isTyping]);\n\n  const handleSendMessage = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput('');\n    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);\n    setIsLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await sendChatMessage(userMessage, sessionId);\n      \n      // Add a small delay to simulate typing\n      setTimeout(() => {\n        setIsTyping(false);\n        setMessages(prev => [...prev, { role: 'assistant', content: response.response }]);\n        setSessionId(response.sessionId);\n      }, 1500);\n    } catch (error) {\n      setIsTyping(false);\n      toast({\n        title: \"Chat Error\",\n        description: error instanceof Error ? error.message : \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const sendQuickMessage = (message: string) => {\n    setInput(message);\n    setTimeout(() => handleSendMessage(), 100);\n  };\n\n  const TypingIndicator = () => (\n    <div className=\"flex items-start gap-3\">\n      <div className=\"bg-primary text-primary-foreground rounded-lg p-3\">\n        <div className=\"typing-indicator\">\n          <div className=\"typing-dot\"></div>\n          <div className=\"typing-dot\"></div>\n          <div className=\"typing-dot\"></div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-4xl mx-auto grid md:grid-cols-2 gap-8\">\n      {/* Chat Interface */}\n      <div className=\"chat-demo rounded-lg p-6 border border-border\">\n        <Card className=\"p-4 shadow-sm\">\n          <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n            <Bot className=\"h-5 w-5 text-primary\" />\n            AI Business Assistant\n          </h4>\n          \n          <div className=\"space-y-3 min-h-[300px] max-h-[300px] overflow-y-auto mb-4\" data-testid=\"chat-messages\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`flex items-start gap-3 animate-slide-up ${\n                  message.role === 'user' ? 'justify-end' : ''\n                }`}\n                data-testid={`message-${message.role}-${index}`}\n              >\n                {message.role === 'assistant' && (\n                  <Bot className=\"h-4 w-4 text-primary mt-1\" />\n                )}\n                <div\n                  className={`rounded-lg p-3 max-w-xs ${\n                    message.role === 'user'\n                      ? 'bg-secondary text-secondary-foreground'\n                      : 'bg-primary text-primary-foreground'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.content}</p>\n                </div>\n                {message.role === 'user' && (\n                  <User className=\"h-4 w-4 text-muted-foreground mt-1\" />\n                )}\n              </div>\n            ))}\n            \n            {isTyping && <TypingIndicator />}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Input\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Ask about inventory, place an order, or any business question...\"\n              className=\"flex-1\"\n              disabled={isLoading}\n              data-testid=\"input-chat\"\n            />\n            <Button \n              onClick={handleSendMessage}\n              disabled={isLoading || !input.trim()}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"flex gap-2 mt-3 flex-wrap\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => sendQuickMessage('Check inventory for iPhone 15')}\n              disabled={isLoading}\n              data-testid=\"button-quick-inventory\"\n            >\n              Check Inventory\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => sendQuickMessage('Place order for 2 laptops')}\n              disabled={isLoading}\n              data-testid=\"button-quick-order\"\n            >\n              Place Order\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => sendQuickMessage('What are your business hours?')}\n              disabled={isLoading}\n              data-testid=\"button-quick-hours\"\n            >\n              Business Hours\n            </Button>\n          </div>\n        </Card>\n      </div>\n      \n      {/* Features Highlight */}\n      <div className=\"space-y-6\">\n        <Card className=\"p-6 border border-border\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"bg-primary/10 p-2 rounded-lg\">\n              <i className=\"fas fa-database text-primary text-lg\"></i>\n            </div>\n            <h4 className=\"font-semibold\">Real-time Data Integration</h4>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Connects to your database for live inventory updates and customer information\n          </p>\n        </Card>\n        \n        <Card className=\"p-6 border border-border\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"bg-primary/10 p-2 rounded-lg\">\n              <i className=\"fas fa-image text-primary text-lg\"></i>\n            </div>\n            <h4 className=\"font-semibold\">Image Processing</h4>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Analyzes product images and provides detailed information and recommendations\n          </p>\n        </Card>\n        \n        <Card className=\"p-6 border border-border\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"bg-primary/10 p-2 rounded-lg\">\n              <i className=\"fas fa-shopping-cart text-primary text-lg\"></i>\n            </div>\n            <h4 className=\"font-semibold\">Order Management</h4>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Processes orders directly and updates your Excel sheets automatically\n          </p>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7741},"chatbot-product.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { ArrowLeft, Database, Image, ShoppingCart } from 'lucide-react';\nimport { ChatDemo } from '@/components/chat-demo';\nimport { DemoModal } from '@/components/demo-modal';\nimport { FaWhatsapp, FaFacebookMessenger } from 'react-icons/fa';\nimport { Globe } from 'lucide-react';\n\nexport default function ChatbotProduct() {\n  const [showDemoModal, setShowDemoModal] = useState(false);\n\n  return (\n    <div className=\"min-h-screen\">\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <Link href=\"/\" className=\"inline-flex items-center gap-2 text-primary hover:text-primary/80 mb-6\" data-testid=\"link-back-home\">\n              <ArrowLeft className=\"h-4 w-4\" /> Back to Products\n            </Link>\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6\" data-testid=\"text-product-title\">\n              AI Business Chatbot\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-product-subtitle\">\n              Transform customer interactions with our intelligent chatbot that understands your business, manages inventory, and processes orders seamlessly across multiple platforms.\n            </p>\n          </div>\n\n          {/* Live Demo Section */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-6 text-center\" data-testid=\"text-demo-title\">Try Our Live Demo</h3>\n            <ChatDemo />\n          </Card>\n\n          {/* Integration Platforms */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-integration-title\">Multi-Platform Integration</h3>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\" data-testid=\"card-whatsapp\">\n                <FaWhatsapp className=\"text-4xl text-green-500 mb-4 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">WhatsApp Business</h4>\n                <p className=\"text-sm text-muted-foreground\">Seamless integration with WhatsApp for customer support</p>\n              </div>\n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\" data-testid=\"card-messenger\">\n                <FaFacebookMessenger className=\"text-4xl text-blue-500 mb-4 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">Facebook Messenger</h4>\n                <p className=\"text-sm text-muted-foreground\">Connect with customers through Messenger platform</p>\n              </div>\n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\" data-testid=\"card-website\">\n                <Globe className=\"h-10 w-10 text-primary mb-4 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">Website Widget</h4>\n                <p className=\"text-sm text-muted-foreground\">Embed directly on your website for instant support</p>\n              </div>\n            </div>\n          </Card>\n\n          {/* AI Agent in Action Section */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-ai-action-title\">See AI Agent in Action</h3>\n            \n            {/* Text Responses */}\n            <div className=\"grid md:grid-cols-2 gap-12 mb-16\">\n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6\">Smart Text Responses</h4>\n                <div className=\"relative mx-auto w-64 h-[500px] bg-gradient-to-br from-gray-900 to-gray-700 rounded-[2.5rem] p-2 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-[2rem] relative overflow-hidden\">\n                    {/* iPhone Status Bar */}\n                    <div className=\"bg-black text-white text-xs py-1 px-4 flex justify-between items-center\">\n                      <span>9:41</span>\n                      <div className=\"w-4 h-4 bg-white rounded-full\"></div>\n                      <span>100%</span>\n                    </div>\n                    \n                    {/* Chat Interface */}\n                    <div className=\"p-4 h-full bg-gradient-to-b from-blue-50 to-white\">\n                      <div className=\"text-center mb-4\">\n                        <h5 className=\"font-semibold text-lg\">TechStore Support</h5>\n                        <p className=\"text-xs text-gray-500\">Online now</p>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-3 max-w-[80%] text-sm\">\n                            Do you have iPhone 15 in stock?\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-gray-200 text-gray-800 rounded-lg p-3 max-w-[80%] text-sm\">\n                            Yes! We have 12 iPhone 15 units in stock. Available colors: Blue, Pink, Yellow, Green, Black. Price: $799. Would you like to place an order?\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-3 max-w-[80%] text-sm\">\n                            Yes, I want the blue one\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-gray-200 text-gray-800 rounded-lg p-3 max-w-[80%] text-sm\">\n                            Perfect! I can help you order the iPhone 15 in Blue. Please provide your name and delivery address.\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  Instant responses with real inventory data and order processing\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6\">Image Analysis</h4>\n                <div className=\"relative mx-auto w-64 h-[500px] bg-gradient-to-br from-gray-900 to-gray-700 rounded-[2.5rem] p-2 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-[2rem] relative overflow-hidden\">\n                    {/* iPhone Status Bar */}\n                    <div className=\"bg-black text-white text-xs py-1 px-4 flex justify-between items-center\">\n                      <span>9:41</span>\n                      <div className=\"w-4 h-4 bg-white rounded-full\"></div>\n                      <span>100%</span>\n                    </div>\n                    \n                    {/* Chat Interface */}\n                    <div className=\"p-4 h-full bg-gradient-to-b from-blue-50 to-white\">\n                      <div className=\"text-center mb-4\">\n                        <h5 className=\"font-semibold text-lg\">TechStore Support</h5>\n                        <p className=\"text-xs text-gray-500\">Online now</p>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-2 max-w-[80%]\">\n                            <img \n                              src=\"https://images.unsplash.com/photo-1592899677977-9c10ca588bbd?w=150&h=100&fit=crop\" \n                              alt=\"Laptop image\" \n                              className=\"rounded w-full h-20 object-cover mb-2\"\n                            />\n                            <p className=\"text-sm\">What laptop is this?</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-gray-200 text-gray-800 rounded-lg p-3 max-w-[80%] text-sm\">\n                            I can see this is a MacBook Pro. Based on the image, it appears to be a 14\" or 16\" model. We have similar MacBook Pro models in stock starting at $1,999. Would you like details on our current inventory?\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-3 max-w-[80%] text-sm\">\n                            Yes, show me the 14\" models\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  AI analyzes images and provides accurate product information\n                </p>\n              </div>\n            </div>\n            \n            {/* WhatsApp and Messenger Integration */}\n            <div className=\"grid md:grid-cols-2 gap-12\">\n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6 flex items-center justify-center gap-2\">\n                  <FaWhatsapp className=\"text-green-500\" />\n                  WhatsApp Integration\n                </h4>\n                <div className=\"relative mx-auto w-80 h-[400px] bg-gradient-to-br from-gray-200 to-gray-400 rounded-2xl p-4 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-xl relative overflow-hidden\">\n                    {/* Computer Screen Mockup */}\n                    <div className=\"bg-green-600 text-white p-3 text-center\">\n                      <h5 className=\"font-semibold\">WhatsApp Business Dashboard</h5>\n                    </div>\n                    \n                    <div className=\"p-4 space-y-4\">\n                      <div className=\"bg-green-50 border-l-4 border-green-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-green-800\">Customer: +1 555-0123</p>\n                        <p className=\"text-sm text-gray-700\">\"Hi, do you deliver to Brooklyn?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"Yes! We deliver to Brooklyn. Delivery is free for orders over $50 and typically takes 2-3 business days. Would you like to place an order?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-green-50 border-l-4 border-green-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-green-800\">Customer: +1 555-0123</p>\n                        <p className=\"text-sm text-gray-700\">\"Perfect! I need a wireless mouse\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"Great choice! We have several wireless mice in stock: Logitech MX Master 3 ($99), Apple Magic Mouse ($79), Microsoft Surface Mouse ($59). Which one interests you?\"</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  Seamless WhatsApp integration with automated customer support\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6 flex items-center justify-center gap-2\">\n                  <FaFacebookMessenger className=\"text-blue-500\" />\n                  Messenger Integration\n                </h4>\n                <div className=\"relative mx-auto w-80 h-[400px] bg-gradient-to-br from-gray-200 to-gray-400 rounded-2xl p-4 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-xl relative overflow-hidden\">\n                    {/* Computer Screen Mockup */}\n                    <div className=\"bg-blue-600 text-white p-3 text-center\">\n                      <h5 className=\"font-semibold\">Facebook Business Dashboard</h5>\n                    </div>\n                    \n                    <div className=\"p-4 space-y-4\">\n                      <div className=\"bg-purple-50 border-l-4 border-purple-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-purple-800\">Sarah Johnson</p>\n                        <p className=\"text-sm text-gray-700\">\"What are your business hours?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"We're open Monday-Friday 9AM-6PM EST, and Saturday 10AM-4PM EST. We're closed on Sundays. Our online store is available 24/7 for orders!\"</p>\n                      </div>\n                      \n                      <div className=\"bg-purple-50 border-l-4 border-purple-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-purple-800\">Sarah Johnson</p>\n                        <p className=\"text-sm text-gray-700\">\"Do you have any deals on headphones?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"Yes! We currently have 20% off all Sony headphones and 15% off Bose models. The Sony WH-1000XM5 is now $279 (down from $349). Would you like to hear about more deals?\"</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  Facebook Messenger integration with intelligent conversation flow\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-feature-realtime\">\n              <Database className=\"h-8 w-8 text-primary mb-4\" />\n              <h4 className=\"font-semibold mb-3\">Real-time Data Integration</h4>\n              <p className=\"text-sm text-muted-foreground\">Connects to your database for live inventory updates and customer information</p>\n            </Card>\n            \n            <Card className=\"p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-feature-image\">\n              <Image className=\"h-8 w-8 text-primary mb-4\" />\n              <h4 className=\"font-semibold mb-3\">Image Processing</h4>\n              <p className=\"text-sm text-muted-foreground\">Analyzes product images and provides detailed information and recommendations</p>\n            </Card>\n            \n            <Card className=\"p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-feature-orders\">\n              <ShoppingCart className=\"h-8 w-8 text-primary mb-4\" />\n              <h4 className=\"font-semibold mb-3\">Order Management</h4>\n              <p className=\"text-sm text-muted-foreground\">Processes orders directly and updates your Excel sheets automatically</p>\n            </Card>\n          </div>\n\n          {/* Pricing */}\n          <Card className=\"p-8 shadow-lg text-center\">\n            <h3 className=\"text-2xl font-bold mb-6\" data-testid=\"text-pricing-title\">Choose Your Plan</h3>\n            <div className=\"inline-block bg-gradient-to-r from-primary to-accent text-white rounded-2xl p-8\">\n              <h4 className=\"text-xl font-bold mb-2\">Professional Plan</h4>\n              <div className=\"text-4xl font-bold mb-4\" data-testid=\"text-pricing-amount\">\n                $299\n                <span className=\"text-lg font-normal\">/month</span>\n              </div>\n              <Button \n                onClick={() => setShowDemoModal(true)}\n                className=\"bg-white text-primary px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n                data-testid=\"button-get-started\"\n              >\n                Book Demo & Get Started\n              </Button>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      <DemoModal open={showDemoModal} onOpenChange={setShowDemoModal} />\n    </div>\n  );\n}\n","size_bytes":17374},"checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from '../shared/schema';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":245},"demo-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useLanguage } from '@/components/language-provider';\nimport { Calendar } from 'lucide-react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface DemoModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface DemoBookingForm {\n  fullName: string;\n  email: string;\n  company: string;\n  productInterest: string;\n}\n\nexport function DemoModal({ open, onOpenChange }: DemoModalProps) {\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState<DemoBookingForm>({\n    fullName: '',\n    email: '',\n    company: '',\n    productInterest: 'AI Business Chatbot',\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: DemoBookingForm) => {\n      const response = await apiRequest('POST', '/api/demo-bookings', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demo booked successfully!\",\n        description: \"We'll contact you within 24 hours to schedule your personalized demo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/demo-bookings'] });\n      onOpenChange(false);\n      setFormData({\n        fullName: '',\n        email: '',\n        company: '',\n        productInterest: 'AI Business Chatbot',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking failed\",\n        description: error instanceof Error ? error.message : \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    bookingMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof DemoBookingForm, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md animate-scale-in\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <Calendar className=\"h-12 w-12 text-primary\" />\n          </div>\n          <DialogTitle className=\"text-2xl font-bold\">{t.demo.title}</DialogTitle>\n          <p className=\"text-muted-foreground\">{t.demo.subtitle}</p>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"fullName\" className=\"text-sm font-medium\">\n              {t.demo.fullName}\n            </Label>\n            <Input\n              id=\"fullName\"\n              type=\"text\"\n              placeholder=\"Your full name\"\n              value={formData.fullName}\n              onChange={(e) => handleInputChange('fullName', e.target.value)}\n              required\n              data-testid=\"input-full-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n              {t.demo.email}\n            </Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"your@email.com\"\n              value={formData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"company\" className=\"text-sm font-medium\">\n              {t.demo.company}\n            </Label>\n            <Input\n              id=\"company\"\n              type=\"text\"\n              placeholder=\"Your company name\"\n              value={formData.company}\n              onChange={(e) => handleInputChange('company', e.target.value)}\n              data-testid=\"input-company\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"productInterest\" className=\"text-sm font-medium\">\n              {t.demo.productInterest}\n            </Label>\n            <Select value={formData.productInterest} onValueChange={(value) => handleInputChange('productInterest', value)}>\n              <SelectTrigger data-testid=\"select-product-interest\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"AI Business Chatbot\">AI Business Chatbot</SelectItem>\n                <SelectItem value=\"Automated Recruiting System\">Automated Recruiting System</SelectItem>\n                <SelectItem value=\"Both Products\">Both Products</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"flex gap-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"flex-1\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              {t.demo.cancel}\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n              disabled={bookingMutation.isPending}\n              data-testid=\"button-book-demo\"\n            >\n              {bookingMutation.isPending ? \"Booking...\" : t.demo.book}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5776},"devServer.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\n// dynamically import createServer inside setupVite to avoid runtime\n// named-export resolution issues in some Node/packaging setups\nimport { type Server } from \"http\";\nimport viteConfig from \"./vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = {\n  info: console.log,\n  warn: console.warn,\n  error: console.error,\n};\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  // import Vite at runtime to avoid ESM named-export issues\n  const { createServer } = await import('vite');\n\n  const viteServer = await createServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(viteServer.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await viteServer.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      viteServer.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2505},"dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"email.ts":{"content":"import nodemailer from 'nodemailer';\n\nexport async function sendBookingEmailAlert({ to, subject, text }: { to: string; subject: string; text: string }) {\n  const transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASS,\n    },\n  });\n\n  await transporter.sendMail({\n    from: process.env.EMAIL_USER,\n    to,\n    subject,\n    text,\n  });\n}\n","size_bytes":429},"footer.tsx":{"content":"import { useLanguage } from '@/components/language-provider';\nimport { Brain } from 'lucide-react';\nimport { FaTwitter, FaFacebook, FaLinkedin } from 'react-icons/fa';\n\nexport function Footer() {\n  const { t } = useLanguage();\n\n  return (\n    <footer className=\"bg-secondary/30 py-12 border-t border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Brain className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold gradient-text\">AI Solutions</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              {t.footer.description}\n            </p>\n            <div className=\"flex space-x-4\">\n              <FaTwitter className=\"text-muted-foreground hover:text-primary cursor-pointer transition-colors\" data-testid=\"link-twitter\" />\n              <FaFacebook className=\"text-muted-foreground hover:text-primary cursor-pointer transition-colors\" data-testid=\"link-facebook\" />\n              <FaLinkedin className=\"text-muted-foreground hover:text-primary cursor-pointer transition-colors\" data-testid=\"link-linkedin\" />\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">{t.footer.products}</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-chatbot\">AI Business Chatbot</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-recruiting\">Recruiting System</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-coming-soon\">Coming Soon</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">{t.footer.support}</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-docs\">Documentation</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-support\">Contact Support</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-book-demo\">Book Demo</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">{t.footer.contact}</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li data-testid=\"text-email\">support@aisolutions.com</li>\n              <li data-testid=\"text-phone\">+1 (555) 123-4567</li>\n              <li data-testid=\"text-address\">San Francisco, CA</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-8 pt-8 text-center text-muted-foreground\">\n          <p data-testid=\"text-copyright\">{t.footer.copyright}</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3106},"form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"gemini-chat.ts":{"content":"import express from 'express';\nimport axios from 'axios';\n\nconst router = express.Router();\n\n// Gemini system prompt for Oishy\nconst SYSTEM_PROMPT = `You are Oishy, a friendly, helpful, and knowledgeable human representative from {company name}. Always respond in a warm, conversational, and human-like manner. Use natural language, show empathy, and personalize your responses. If you don’t know something, say so honestly. Never mention you are an AI or chatbot.`;\n\n// Gemini API endpoint\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\n\nrouter.post('/', async (req, res) => {\n  const { message, sessionId } = req.body;\n  if (!message) {\n    return res.status(400).json({ message: 'Message is required' });\n  }\n  try {\n    const apiKey = process.env.GEMINI_API_KEY;\n    if (!apiKey) {\n      return res.status(500).json({ message: 'Gemini API key not set' });\n    }\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          { role: 'user', parts: [{ text: SYSTEM_PROMPT }] },\n          { role: 'user', parts: [{ text: message }] }\n        ]\n      }\n    );\n    const aiMessage = response.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I could not generate a response.';\n    res.json({ response: aiMessage, sessionId: sessionId || null });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to process chat message', error: error.message });\n  }\n});\n\nexport default router;\n","size_bytes":1526},"gemini.ts":{"content":"import fetch from 'node-fetch';\n\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\nexport async function geminiChat(messages: {role: string, content: string}[], companyName: string) {\n  // Compose a prompt for \"Oishy\" from the company\n  const systemPrompt = `You are Oishy, a friendly, helpful, and realistic human assistant from {companyName}.\\nSpeak naturally, use casual language, and always sound human.\\nIf asked about the company, refer to it as {companyName}.`;\n  const fullMessages = [\n    { role: 'user', content: systemPrompt.replace(/{companyName}/g, companyName) },\n    ...messages\n  ];\n\n  const body = {\n    contents: [\n      {\n        role: 'user',\n        parts: [\n          { text: fullMessages.map(m => `${m.role === 'user' ? 'User' : 'Oishy'}: ${m.content}`).join('\\n') }\n        ]\n      }\n    ]\n  };\n\n  const url = `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body)\n  });\n\n  if (!response.ok) {\n    throw new Error(`Gemini API error: ${response.status} ${await response.text()}`);\n  }\n\n  const data = await response.json();\n  // Gemini returns candidates[0].content.parts[0].text\n  return data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I could not generate a response.';\n}\n","size_bytes":1449},"hero.ts":{"content":"import express from 'express';\nimport { db } from '../db';\nimport { heroSection } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = express.Router();\n\n// Always use the first row (single hero section)\nrouter.get('/', async (req, res) => {\n  let hero = await db.select().from(heroSection).limit(1);\n  if (!hero.length) {\n    // Insert default if not present\n    const inserted = await db.insert(heroSection).values({\n      title: 'Transform Your Business with AI Solutions',\n      subtitle: 'Discover powerful AI tools designed for local businesses. From intelligent chatbots to automated recruiting systems, we have the solutions to streamline your operations.'\n    }).returning();\n    return res.json(inserted[0]);\n  }\n  res.json(hero[0]);\n});\n\nrouter.put('/', async (req, res) => {\n  const { title, subtitle } = req.body;\n  let hero = await db.select().from(heroSection).limit(1);\n  if (!hero.length) {\n    const inserted = await db.insert(heroSection).values({ title, subtitle }).returning();\n    return res.json(inserted[0]);\n  }\n  const [updated] = await db.update(heroSection).set({ title, subtitle }).where(eq(heroSection.id, hero[0].id)).returning();\n  res.json(updated);\n});\n\nexport default router;\n","size_bytes":1236},"home.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useLanguage } from '@/components/language-provider';\nimport { DemoModal } from '@/components/demo-modal';\nimport { MessageCircle, UserCheck, Check } from 'lucide-react';\n\n// Custom hook for scroll animations\nfunction useScrollAnimation() {\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      if (ref.current) {\n        observer.unobserve(ref.current);\n      }\n    };\n  }, []);\n\n  return [ref, isVisible] as const;\n}\n\nexport default function Home() {\n  const { t } = useLanguage();\n  const [showDemoModal, setShowDemoModal] = useState(false);\n  \n  // Scroll animation refs\n  const [productsRef, productsVisible] = useScrollAnimation();\n  const [whyChooseRef, whyChooseVisible] = useScrollAnimation();\n  const [reviewsRef, reviewsVisible] = useScrollAnimation();\n  const [faqRef, faqVisible] = useScrollAnimation();\n  const [contactRef, contactVisible] = useScrollAnimation();\n\n  const scrollToProducts = () => {\n    document.getElementById('products')?.scrollIntoView({ \n      behavior: 'smooth' \n    });\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section id=\"home\" className=\"relative overflow-hidden bg-gradient-to-br from-background to-secondary py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center animate-fade-in\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              Transform Your Business with\n              <span className=\"gradient-text block mt-2\">AI Solutions</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\" data-testid=\"text-hero-subtitle\">\n              {t.hero.subtitle}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-16\">\n              <Button \n                onClick={scrollToProducts} \n                className=\"bg-primary text-primary-foreground px-8 py-3 hover:bg-primary/90 transition-all hover:scale-105\"\n                data-testid=\"button-explore-products\"\n              >\n                {t.hero.exploreProducts}\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => setShowDemoModal(true)}\n                className=\"px-8 py-3 hover:bg-secondary transition-colors\"\n                data-testid=\"button-book-demo\"\n              >\n                {t.hero.bookDemo}\n              </Button>\n            </div>\n            \n            {/* Powered By Section */}\n            <div className=\"relative mt-16\">\n              <p className=\"text-center text-muted-foreground mb-8 text-lg font-medium\">Powered by Leading AI Technologies</p>\n              <div className=\"overflow-hidden\">\n                <div className=\"flex animate-scroll space-x-12\">\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">GPT</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">ChatGPT-5</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">NB</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Nano Banana</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">N8N</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">N8N</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">G</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Gemini Pro</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-red-400 to-pink-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">V3</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">VEO3</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">C</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Claude Sonnet</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-teal-400 to-green-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">L</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">LLaMA 3</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-orange-400 to-red-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">D</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">DALL-E 3</span>\n                  </div>\n                  \n                  {/* Duplicate the logos for seamless loop */}\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">GPT</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">ChatGPT-5</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">NB</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Nano Banana</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">N8N</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">N8N</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">G</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Gemini Pro</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Floating Animation Elements */}\n          <div className=\"absolute top-20 left-10 w-20 h-20 bg-primary/10 rounded-full animate-pulse-slow\"></div>\n          <div className=\"absolute top-40 right-20 w-16 h-16 bg-accent/10 rounded-full animate-pulse-slow\" style={{animationDelay: '1s'}}></div>\n          <div className=\"absolute bottom-20 left-1/4 w-12 h-12 bg-primary/10 rounded-full animate-pulse-slow\" style={{animationDelay: '2s'}}></div>\n        </div>\n      </section>\n\n      {/* Products Grid Section */}\n      <section id=\"products\" className=\"py-20\">\n        <div \n          ref={productsRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            productsVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16 animate-fade-in\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-products-title\">\n              {t.products.title}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-products-subtitle\">\n              {t.products.subtitle}\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            {/* Product 1: AI Chatbot */}\n            <Card className=\"p-8 hover:shadow-xl transition-all duration-300 feature-card cursor-pointer\" data-testid=\"card-product-chatbot\">\n              <Link href=\"/chatbot\">\n                <div className=\"block\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1677442136019-21780ecad995?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                    alt=\"AI Chatbot Interface\" \n                    className=\"w-full h-48 object-cover rounded-lg mb-6\"\n                    data-testid=\"img-chatbot\"\n                  />\n                  \n                  <div className=\"flex items-start gap-4 mb-4\">\n                    <div className=\"bg-primary/10 p-3 rounded-lg\">\n                      <MessageCircle className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-chatbot-title\">\n                        {t.products.chatbot.title}\n                      </h3>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary border-primary/20\">\n                          Most Popular\n                        </Badge>\n                        <span>•</span>\n                        <span>Real-time Integration</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground mb-6\" data-testid=\"text-chatbot-description\">\n                    {t.products.chatbot.description}\n                  </p>\n                  \n                  <div className=\"space-y-3 mb-6\">\n                    {t.products.chatbot.features.map((feature, index) => (\n                      <div key={index} className=\"flex items-center gap-3\" data-testid={`feature-chatbot-${index}`}>\n                        <Check className=\"h-4 w-4 text-primary\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"text-sm text-muted-foreground\">Starting at</span>\n                      <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-chatbot-price\">\n                        {t.products.chatbot.price}\n                        <span className=\"text-sm text-muted-foreground font-normal\">{t.products.chatbot.currency}</span>\n                      </div>\n                    </div>\n                    <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"button-chatbot-learn-more\">\n                      {t.products.chatbot.learnMore}\n                    </Button>\n                  </div>\n                </div>\n              </Link>\n            </Card>\n            \n            {/* Product 2: Automated Recruiting */}\n            <Card className=\"p-8 hover:shadow-xl transition-all duration-300 feature-card cursor-pointer\" data-testid=\"card-product-recruiting\">\n              <Link href=\"/recruiting\">\n                <div className=\"block\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                    alt=\"Automated Recruiting System\" \n                    className=\"w-full h-48 object-cover rounded-lg mb-6\"\n                    data-testid=\"img-recruiting\"\n                  />\n                  \n                  <div className=\"flex items-start gap-4 mb-4\">\n                    <div className=\"bg-accent/10 p-3 rounded-lg\">\n                      <UserCheck className=\"h-6 w-6 text-accent\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-recruiting-title\">\n                        {t.products.recruiting.title}\n                      </h3>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n                        <Badge variant=\"outline\" className=\"bg-accent/10 text-accent border-accent/20\">\n                          Time Saver\n                        </Badge>\n                        <span>•</span>\n                        <span>AI-Powered Screening</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground mb-6\" data-testid=\"text-recruiting-description\">\n                    {t.products.recruiting.description}\n                  </p>\n                  \n                  <div className=\"space-y-3 mb-6\">\n                    {t.products.recruiting.features.map((feature, index) => (\n                      <div key={index} className=\"flex items-center gap-3\" data-testid={`feature-recruiting-${index}`}>\n                        <Check className=\"h-4 w-4 text-accent\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"text-sm text-muted-foreground\">Starting at</span>\n                      <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-recruiting-price\">\n                        {t.products.recruiting.price}\n                        <span className=\"text-sm text-muted-foreground font-normal\">{t.products.recruiting.currency}</span>\n                      </div>\n                    </div>\n                    <Button className=\"bg-accent text-accent-foreground hover:bg-accent/90\" data-testid=\"button-recruiting-learn-more\">\n                      {t.products.recruiting.learnMore}\n                    </Button>\n                  </div>\n                </div>\n              </Link>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Our Solutions Section */}\n      <section id=\"why-choose\" className=\"py-20 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div \n          ref={whyChooseRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            whyChooseVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-why-choose-title\">\n              Why Choose Our AI Solutions?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              We deliver cutting-edge AI technology that transforms businesses with proven results and unmatched reliability.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"p-8 text-center hover:shadow-lg transition-shadow\" data-testid=\"card-why-proven\">\n              <div className=\"bg-primary/10 p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Check className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Proven Results</h3>\n              <p className=\"text-muted-foreground\">\n                Our solutions have helped 500+ businesses increase efficiency by 80% and reduce operational costs significantly.\n              </p>\n            </Card>\n            \n            <Card className=\"p-8 text-center hover:shadow-lg transition-shadow\" data-testid=\"card-why-support\">\n              <div className=\"bg-accent/10 p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <MessageCircle className=\"h-8 w-8 text-accent\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">24/7 Expert Support</h3>\n              <p className=\"text-muted-foreground\">\n                Dedicated support team available round-the-clock to ensure your AI solutions run smoothly and efficiently.\n              </p>\n            </Card>\n            \n            <Card className=\"p-8 text-center hover:shadow-lg transition-shadow\" data-testid=\"card-why-integration\">\n              <div className=\"bg-primary/10 p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <UserCheck className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Easy Integration</h3>\n              <p className=\"text-muted-foreground\">\n                Seamlessly integrate with your existing systems. Setup in minutes, not weeks, with our guided implementation process.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Customer Reviews Section */}\n      <section id=\"reviews\" className=\"py-20\">\n        <div \n          ref={reviewsRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            reviewsVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-reviews-title\">\n              What Our Customers Say\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Trusted by businesses worldwide. See how our AI solutions have transformed their operations.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"p-8 hover:shadow-lg transition-shadow\" data-testid=\"card-review-1\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {\"★\".repeat(5)}\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-6 italic\">\n                \"The AI chatbot reduced our customer service workload by 70%. Our team can now focus on complex issues while the bot handles routine inquiries perfectly.\"\n              </p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                  SJ\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Sarah Johnson</h4>\n                  <p className=\"text-sm text-muted-foreground\">CEO, TechStart Inc.</p>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-8 hover:shadow-lg transition-shadow\" data-testid=\"card-review-2\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {\"★\".repeat(5)}\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-6 italic\">\n                \"The recruiting system streamlined our hiring process completely. We went from screening 100 CVs manually to having the top 10 candidates selected automatically.\"\n              </p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                  MR\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Michael Rodriguez</h4>\n                  <p className=\"text-sm text-muted-foreground\">HR Director, Global Corp</p>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-8 hover:shadow-lg transition-shadow\" data-testid=\"card-review-3\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {\"★\".repeat(5)}\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-6 italic\">\n                \"Implementation was seamless and the ROI was immediate. Our order processing is now 5x faster and error-free. Best investment we've made this year.\"\n              </p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                  EL\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Emily Liu</h4>\n                  <p className=\"text-sm text-muted-foreground\">Operations Manager, RetailPlus</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section id=\"faq\" className=\"py-20 bg-secondary/30\">\n        <div \n          ref={faqRef}\n          className={`max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            faqVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-faq-title\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Get answers to the most common questions about our AI solutions.\n            </p>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <Card className=\"p-6\" data-testid=\"card-faq-1\">\n              <h3 className=\"text-lg font-semibold mb-3\">How quickly can I see results with your AI solutions?</h3>\n              <p className=\"text-muted-foreground\">\n                Most customers see immediate improvements within the first week of implementation. Full optimization typically occurs within 30 days as the AI learns your business patterns.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-2\">\n              <h3 className=\"text-lg font-semibold mb-3\">Do I need technical expertise to use these solutions?</h3>\n              <p className=\"text-muted-foreground\">\n                Not at all! Our solutions are designed for business users. We provide complete setup assistance, training, and ongoing support to ensure success without technical complexity.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-3\">\n              <h3 className=\"text-lg font-semibold mb-3\">Can the AI integrate with my existing systems?</h3>\n              <p className=\"text-muted-foreground\">\n                Yes, our AI solutions integrate seamlessly with popular platforms including Excel, Google Sheets, WhatsApp, Messenger, and most CRM systems through our robust API connections.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-4\">\n              <h3 className=\"text-lg font-semibold mb-3\">What happens to my data? Is it secure?</h3>\n              <p className=\"text-muted-foreground\">\n                Your data security is our top priority. We use enterprise-grade encryption, comply with GDPR standards, and never share your business data with third parties.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-5\">\n              <h3 className=\"text-lg font-semibold mb-3\">Can I customize the AI to match my business needs?</h3>\n              <p className=\"text-muted-foreground\">\n                Absolutely! Our AI solutions are highly customizable. You can train the chatbot with your specific business knowledge and configure recruiting criteria to match your exact requirements.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Us Section */}\n      <section id=\"contact\" className=\"py-20 bg-gradient-to-br from-primary/10 to-accent/10\">\n        <div \n          ref={contactRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            contactVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-contact-title\">\n              Ready to Transform Your Business?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Get started today with a personalized demo or speak with our AI specialists to find the perfect solution for your business.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n            <Card className=\"p-8\">\n              <h3 className=\"text-2xl font-bold mb-6\">Get in Touch</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\" data-testid=\"contact-email\">\n                  <div className=\"bg-primary/10 p-3 rounded-lg\">\n                    <MessageCircle className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Email Us</p>\n                    <p className=\"text-muted-foreground\">support@aisolutions.com</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4\" data-testid=\"contact-phone\">\n                  <div className=\"bg-accent/10 p-3 rounded-lg\">\n                    <Check className=\"h-5 w-5 text-accent\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Call Us</p>\n                    <p className=\"text-muted-foreground\">+1 (555) 123-4567</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4\" data-testid=\"contact-hours\">\n                  <div className=\"bg-primary/10 p-3 rounded-lg\">\n                    <UserCheck className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Business Hours</p>\n                    <p className=\"text-muted-foreground\">Mon-Fri: 9AM-6PM EST</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-8\">\n              <h3 className=\"text-2xl font-bold mb-6\">Book Your Free Demo</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                See our AI solutions in action with a personalized demonstration tailored to your business needs.\n              </p>\n              <Button \n                onClick={() => setShowDemoModal(true)}\n                className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 py-3\"\n                data-testid=\"button-book-demo-contact\"\n              >\n                Schedule Free Demo\n              </Button>\n              \n              <div className=\"mt-6 pt-6 border-t border-border\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  🚀 Join 500+ businesses already using our AI solutions\n                </p>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <DemoModal open={showDemoModal} onOpenChange={setShowDemoModal} />\n    </div>\n  );\n}\n","size_bytes":30417},"hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"i18n.ts":{"content":"export interface Translation {\n  nav: {\n    home: string;\n    products: string;\n    pricing: string;\n    contact: string;\n    getStarted: string;\n  };\n  hero: {\n    title: string;\n    subtitle: string;\n    exploreProducts: string;\n    bookDemo: string;\n  };\n  products: {\n    title: string;\n    subtitle: string;\n    chatbot: {\n      title: string;\n      subtitle: string;\n      description: string;\n      features: string[];\n      price: string;\n      currency: string;\n      learnMore: string;\n    };\n    recruiting: {\n      title: string;\n      subtitle: string;\n      description: string;\n      features: string[];\n      price: string;\n      currency: string;\n      learnMore: string;\n    };\n  };\n  demo: {\n    title: string;\n    subtitle: string;\n    fullName: string;\n    email: string;\n    company: string;\n    productInterest: string;\n    cancel: string;\n    book: string;\n  };\n  footer: {\n    description: string;\n    products: string;\n    support: string;\n    contact: string;\n    copyright: string;\n  };\n}\n\nconst english: Translation = {\n  nav: {\n    home: \"Home\",\n    products: \"Products\", \n    pricing: \"Pricing\",\n    contact: \"Contact\",\n    getStarted: \"Get Started\",\n  },\n  hero: {\n    title: \"Transform Your Business with AI Solutions\",\n    subtitle: \"Discover powerful AI tools designed for local businesses. From intelligent chatbots to automated recruiting systems, we have the solutions to streamline your operations.\",\n    exploreProducts: \"Explore Products\",\n    bookDemo: \"Book a Demo\",\n  },\n  products: {\n    title: \"Our AI Solutions\",\n    subtitle: \"Choose from our cutting-edge AI products designed to revolutionize your business operations\",\n    chatbot: {\n      title: \"AI Business Chatbot\",\n      subtitle: \"Most Popular • Real-time Integration\",\n      description: \"Intelligent chatbot that handles customer inquiries, manages inventory, processes orders, and integrates with WhatsApp and Messenger for seamless customer service.\",\n      features: [\n        \"Real-time data responses\",\n        \"Image query processing\", \n        \"Inventory management\",\n        \"Multi-platform integration\"\n      ],\n      price: \"$299\",\n      currency: \"/month\",\n      learnMore: \"Learn More\",\n    },\n    recruiting: {\n      title: \"Automated Recruiting System\",\n      subtitle: \"Time Saver • AI-Powered Screening\",\n      description: \"Streamline your hiring process with AI-powered CV screening, automatic parsing, keyword matching, and intelligent candidate qualification scoring.\",\n      features: [\n        \"Automated CV screening\",\n        \"Smart data parsing\",\n        \"Keyword matching & scoring\",\n        \"Google Sheets integration\"\n      ],\n      price: \"$199\",\n      currency: \"/month\",\n      learnMore: \"Learn More\",\n    },\n  },\n  demo: {\n    title: \"Book Your Demo\",\n    subtitle: \"Get a personalized demonstration of our AI solutions\",\n    fullName: \"Full Name\",\n    email: \"Email\",\n    company: \"Company\",\n    productInterest: \"Product Interest\",\n    cancel: \"Cancel\",\n    book: \"Book Demo\",\n  },\n  footer: {\n    description: \"Empowering local businesses with cutting-edge AI technology.\",\n    products: \"Products\",\n    support: \"Support\", \n    contact: \"Contact\",\n    copyright: \"© 2024 AI Solutions. All rights reserved.\",\n  },\n};\n\nconst bangla: Translation = {\n  nav: {\n    home: \"হোম\",\n    products: \"পণ্য\",\n    pricing: \"মূল্য\",\n    contact: \"যোগাযোগ\",\n    getStarted: \"শুরু করুন\",\n  },\n  hero: {\n    title: \"AI সমাধান দিয়ে আপনার ব্যবসা রূপান্তরিত করুন\",\n    subtitle: \"স্থানীয় ব্যবসার জন্য ডিজাইন করা শক্তিশালী AI টুলস আবিষ্কার করুন। বুদ্ধিমান চ্যাটবট থেকে স্বয়ংক্রিয় নিয়োগ সিস্টেম পর্যন্ত, আমাদের কাছে আপনার কার্যক্রম সুগম করার সমাধান রয়েছে।\",\n    exploreProducts: \"পণ্য দেখুন\",\n    bookDemo: \"ডেমো বুক করুন\",\n  },\n  products: {\n    title: \"আমাদের AI সমাধান\",\n    subtitle: \"আপনার ব্যবসায়িক কার্যক্রম বিপ্লব ঘটানোর জন্য ডিজাইন করা আমাদের অত্যাধুনিক AI পণ্য থেকে বেছে নিন\",\n    chatbot: {\n      title: \"AI ব্যবসায়িক চ্যাটবট\",\n      subtitle: \"সর্বাধিক জনপ্রিয় • রিয়েল-টাইম ইন্টিগ্রেশন\",\n      description: \"বুদ্ধিমান চ্যাটবট যা গ্রাহকের অনুসন্ধান পরিচালনা করে, ইনভেন্টরি পরিচালনা করে, অর্ডার প্রক্রিয়া করে এবং নিরবচ্ছিন্ন গ্রাহক সেবার জন্য WhatsApp এবং Messenger এর সাথে একীভূত হয়।\",\n      features: [\n        \"রিয়েল-টাইম ডেটা প্রতিক্রিয়া\",\n        \"ছবির অনুসন্ধান প্রক্রিয়াকরণ\",\n        \"ইনভেন্টরি ব্যবস্থাপনা\",\n        \"মাল্টি-প্ল্যাটফর্ম ইন্টিগ্রেশন\"\n      ],\n      price: \"৳২৫,০০০\",\n      currency: \"/মাস\",\n      learnMore: \"আরও জানুন\",\n    },\n    recruiting: {\n      title: \"স্বয়ংক্রিয় নিয়োগ সিস্টেম\",\n      subtitle: \"সময় সাশ্রয়ী • AI-চালিত স্ক্রিনিং\",\n      description: \"AI-চালিত CV স্ক্রিনিং, স্বয়ংক্রিয় পার্সিং, কীওয়ার্ড ম্যাচিং এবং বুদ্ধিমান প্রার্থী যোগ্যতা স্কোরিং দিয়ে আপনার নিয়োগ প্রক্রিয়া সুগম করুন।\",\n      features: [\n        \"স্বয়ংক্রিয় CV স্ক্রিনিং\",\n        \"স্মার্ট ডেটা পার্সিং\",\n        \"কীওয়ার্ড ম্যাচিং ও স্কোরিং\",\n        \"Google Sheets ইন্টিগ্রেশন\"\n      ],\n      price: \"৳১৬,৫০০\",\n      currency: \"/মাস\",\n      learnMore: \"আরও জানুন\",\n    },\n  },\n  demo: {\n    title: \"আপনার ডেমো বুক করুন\",\n    subtitle: \"আমাদের AI সমাধানের ব্যক্তিগতকৃত প্রদর্শনী পান\",\n    fullName: \"পূর্ণ নাম\",\n    email: \"ইমেইল\",\n    company: \"কোম্পানি\",\n    productInterest: \"পণ্যের আগ্রহ\",\n    cancel: \"বাতিল\",\n    book: \"ডেমো বুক করুন\",\n  },\n  footer: {\n    description: \"অত্যাধুনিক AI প্রযুক্তি দিয়ে স্থানীয় ব্যবসাকে ক্ষমতায়ন।\",\n    products: \"পণ্য\",\n    support: \"সহায়তা\",\n    contact: \"যোগাযোগ\",\n    copyright: \"© ২০২৪ AI সমাধান। সর্বস্বত্ব সংরক্ষিত।\",\n  },\n};\n\nexport const translations = {\n  en: english,\n  bn: bangla,\n};\n\nexport type Language = keyof typeof translations;\n","size_bytes":7837},"index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(186, 100%, 44%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(186, 100%, 44%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(186, 100%, 44%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(186, 100%, 44%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(186, 100%, 44%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(186, 100%, 44%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer utilities {\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(186, 100%, 44%) 0%, hsl(186, 100%, 34%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .chat-demo {\n    background: linear-gradient(135deg, hsl(210, 40%, 98%) 0%, hsl(186, 30%, 95%) 100%);\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.4s ease-out;\n}\n\n.animate-scale-in {\n  animation: scaleIn 0.3s ease-out;\n}\n\n.animate-pulse-slow {\n  animation: pulse 3s ease-in-out infinite;\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes scaleIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.feature-card:hover {\n  transform: translateY(-4px);\n  transition: all 0.3s ease;\n}\n\n.workflow-step {\n  position: relative;\n  padding: 20px;\n  margin-bottom: 20px;\n  border-radius: 12px;\n  background: white;\n  border: 2px solid hsl(214.3, 31.8%, 91.4%);\n  transition: all 0.3s ease;\n}\n\n.workflow-step:hover {\n  border-color: hsl(186, 100%, 44%);\n  box-shadow: 0 4px 20px hsla(186, 100%, 44%, 0.1);\n}\n\n.workflow-step::after {\n  content: '↓';\n  position: absolute;\n  bottom: -35px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 24px;\n  color: hsl(186, 100%, 44%);\n  font-weight: bold;\n}\n\n.workflow-step:last-child::after {\n  display: none;\n}\n\n.typing-indicator {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.typing-dot {\n  width: 6px;\n  height: 6px;\n  background: hsl(186, 100%, 44%);\n  border-radius: 50%;\n  animation: typing 1.4s infinite ease-in-out;\n}\n\n.typing-dot:nth-child(2) { \n  animation-delay: 0.2s; \n}\n\n.typing-dot:nth-child(3) { \n  animation-delay: 0.4s; \n}\n\n@keyframes typing {\n  0%, 60%, 100% { \n    transform: scale(1); \n    opacity: 0.7; \n  }\n  30% { \n    transform: scale(1.2); \n    opacity: 1; \n  }\n}\n\n@keyframes scroll {\n  0% {\n    transform: translateX(0);\n  }\n  100% {\n    transform: translateX(-50%);\n  }\n}\n\n.animate-scroll {\n  animation: scroll 30s linear infinite;\n}\n","size_bytes":4174},"index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '3000', 10);\n  server.listen(port, \"127.0.0.1\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2050},"input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"language-provider.tsx":{"content":"import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { translations, type Language, type Translation } from '@/lib/i18n';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: Translation;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>('en');\n\n  const value = {\n    language,\n    setLanguage,\n    t: translations[language],\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":899},"main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"navbar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useLanguage } from '@/components/language-provider';\nimport { type Language } from '@/lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Brain } from 'lucide-react';\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const { language, setLanguage, t } = useLanguage();\n\n  return (\n    <nav className=\"sticky top-0 z-50 mx-4 mt-4 rounded-2xl bg-white border border-primary/20 shadow-lg\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <Brain className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold gradient-text\">AI Solutions</span>\n            </Link>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/\" className={`font-medium transition-colors hover:text-primary ${location === '/' ? 'text-primary' : 'text-foreground'}`} data-testid=\"link-nav-home\">\n              {t.nav.home}\n            </Link>\n            <Link href=\"/chatbot\" className={`font-medium transition-colors hover:text-primary ${location === '/chatbot' ? 'text-primary' : 'text-foreground'}`} data-testid=\"link-nav-products\">\n              {t.nav.products}\n            </Link>\n            <a href=\"#pricing\" className=\"text-foreground hover:text-primary transition-colors font-medium\" data-testid=\"link-nav-pricing\">\n              {t.nav.pricing}\n            </a>\n            <a href=\"#contact\" className=\"text-foreground hover:text-primary transition-colors font-medium\" data-testid=\"link-nav-contact\">\n              {t.nav.contact}\n            </a>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Select value={language} onValueChange={(value: Language) => setLanguage(value)}>\n              <SelectTrigger className=\"w-[120px]\" data-testid=\"select-language\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"en\">English</SelectItem>\n                <SelectItem value=\"bn\">বাংলা</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"button-get-started\">\n              {t.nav.getStarted}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2723},"navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"openai.ts":{"content":"import { apiRequest } from '@/lib/queryClient';\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface ChatResponse {\n  response: string;\n  sessionId: string;\n}\n\nexport async function sendChatMessage(message: string, sessionId?: string): Promise<ChatResponse> {\n  try {\n    const response = await apiRequest('POST', '/api/chat', {\n      message,\n      sessionId,\n    });\n    \n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to send chat message');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    throw new Error(error instanceof Error ? error.message : 'Chat service unavailable');\n  }\n}\n","size_bytes":721},"pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pricing.ts":{"content":"import express from 'express';\nimport { db } from '../db';\nimport { pricing as pricingTable } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = express.Router();\n\n// Get all pricing entries\nrouter.get('/', async (req, res) => {\n  const allPricing = await db.select().from(pricingTable);\n  res.json(allPricing);\n});\n\n// Update a pricing entry by id\nrouter.put('/:id', async (req, res) => {\n  const { id } = req.params;\n  const { price } = req.body;\n  // Only update price\n  const [updated] = await db.update(pricingTable)\n    .set({ price: String(price) })\n    .where(eq(pricingTable.id, id))\n    .returning();\n  if (!updated) return res.status(404).json({ message: 'Not found' });\n  res.json(updated);\n});\n\nexport default router;\n","size_bytes":758},"products.ts":{"content":"import express from 'express';\nimport multer from 'multer';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { db } from '../db';\nimport { products as productsTable } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = express.Router();\n\n// No in-memory store; use DB\n\n// Multer setup for thumbnail uploads (ESM compatible)\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst upload = multer({\n  dest: path.join(__dirname, '../../client/public/uploads'),\n});\n\nrouter.get('/', async (req, res) => {\n  const dbProducts = await db.select().from(productsTable);\n  res.json(dbProducts);\n});\n\nrouter.post('/', upload.single('thumbnail'), async (req, res) => {\n  const { name, description, price } = req.body;\n  let thumbnail = '';\n  const file = (req as any).file;\n  if (file) {\n    thumbnail = `/uploads/${file.filename}`;\n  }\n  const [product] = await db.insert(productsTable).values({ name, description, price, thumbnail }).returning();\n  res.status(201).json(product);\n});\n\nrouter.put('/:id', upload.single('thumbnail'), async (req, res) => {\n  const { id } = req.params;\n  const { name, description, price } = req.body;\n  let thumbnail;\n  const file = (req as any).file;\n  if (file) {\n    thumbnail = `/uploads/${file.filename}`;\n  }\n  const updateData: any = { name, description, price };\n  if (thumbnail) updateData.thumbnail = thumbnail;\n  const [product] = await db.update(productsTable).set(updateData).where(eq(productsTable.id, id)).returning();\n  if (!product) return res.status(404).json({ message: 'Product not found' });\n  res.json(product);\n});\n\nrouter.delete('/:id', async (req, res) => {\n  const { id } = req.params;\n  await db.delete(productsTable).where(eq(productsTable.id, id));\n  res.status(204).end();\n});\n\nexport default router;\n","size_bytes":1844},"progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"recruiting-product.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { ArrowLeft, Mail, Search, Brain, Star, CheckCircle, Clock, Scale, TrendingUp, Table, Languages, Shield } from 'lucide-react';\nimport { DemoModal } from '@/components/demo-modal';\n\nexport default function RecruitingProduct() {\n  const [showDemoModal, setShowDemoModal] = useState(false);\n\n  const workflowSteps = [\n    {\n      icon: Mail,\n      title: \"1. CV Collection\",\n      description: \"Automatically collect CVs from emails and Google Sheets\",\n    },\n    {\n      icon: Search,\n      title: \"2. Data Parsing\",\n      description: \"Extract and structure key information from CV documents\",\n    },\n    {\n      icon: Brain,\n      title: \"3. AI Analysis\", \n      description: \"Match keywords and requirements using advanced algorithms\",\n    },\n    {\n      icon: Star,\n      title: \"4. Scoring & Rating\",\n      description: \"Generate qualification scores based on job requirements\",\n    },\n    {\n      icon: CheckCircle,\n      title: \"5. Qualified Selection\",\n      description: \"Automatically filter and organize qualified candidates\",\n    },\n  ];\n\n  const features = [\n    {\n      icon: Clock,\n      title: \"Save 80% Time\",\n      description: \"Reduce manual screening from hours to minutes\",\n    },\n    {\n      icon: Scale,\n      title: \"Reduce Bias\",\n      description: \"Objective, data-driven candidate evaluation\",\n    },\n    {\n      icon: TrendingUp,\n      title: \"Higher Quality\",\n      description: \"Find better matches with AI-powered analysis\",\n    },\n    {\n      icon: Table,\n      title: \"Excel Integration\",\n      description: \"Seamless integration with existing workflows\",\n    },\n    {\n      icon: Languages,\n      title: \"Multi-Language\",\n      description: \"Support for multiple languages and formats\",\n    },\n    {\n      icon: Shield,\n      title: \"Secure & Compliant\",\n      description: \"GDPR compliant data processing\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      <section className=\"py-20 bg-gradient-to-br from-accent/5 to-primary/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <Link href=\"/\" className=\"inline-flex items-center gap-2 text-accent hover:text-accent/80 mb-6\" data-testid=\"link-back-home\">\n              <ArrowLeft className=\"h-4 w-4\" /> Back to Products\n            </Link>\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6\" data-testid=\"text-product-title\">\n              Automated Recruiting System\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-product-subtitle\">\n              Revolutionize your hiring process with AI-powered CV screening that saves time, reduces bias, and identifies the best candidates automatically.\n            </p>\n          </div>\n\n          {/* Workflow Demo */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-workflow-title\">See How It Works</h3>\n            <div className=\"max-w-4xl mx-auto\">\n              {workflowSteps.map((step, index) => (\n                <div\n                  key={index}\n                  className=\"workflow-step\"\n                  data-testid={`workflow-step-${index}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"bg-accent/10 p-3 rounded-full\">\n                      <step.icon className=\"h-6 w-6 text-accent\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-lg mb-2\">{step.title}</h4>\n                      <p className=\"text-muted-foreground\">{step.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            {features.map((feature, index) => (\n              <Card \n                key={index}\n                className=\"p-6 hover:shadow-lg transition-shadow\"\n                data-testid={`card-feature-${index}`}\n              >\n                <feature.icon className=\"h-8 w-8 text-accent mb-4\" />\n                <h4 className=\"font-semibold mb-3\">{feature.title}</h4>\n                <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n              </Card>\n            ))}\n          </div>\n\n          {/* ROI Benefits */}\n          <Card className=\"p-8 mb-12 shadow-lg bg-gradient-to-r from-accent/5 to-primary/5\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-benefits-title\">Measurable Results</h3>\n            <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n              <div data-testid=\"stat-time-saved\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">80%</div>\n                <p className=\"text-muted-foreground\">Time Saved on Screening</p>\n              </div>\n              <div data-testid=\"stat-accuracy\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">95%</div>\n                <p className=\"text-muted-foreground\">Screening Accuracy</p>\n              </div>\n              <div data-testid=\"stat-cost-reduction\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">60%</div>\n                <p className=\"text-muted-foreground\">Cost Reduction</p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Pricing */}\n          <Card className=\"p-8 shadow-lg text-center\">\n            <h3 className=\"text-2xl font-bold mb-6\" data-testid=\"text-pricing-title\">Start Streamlining Today</h3>\n            <div className=\"inline-block bg-gradient-to-r from-accent to-primary text-white rounded-2xl p-8\">\n              <h4 className=\"text-xl font-bold mb-2\">Business Plan</h4>\n              <div className=\"text-4xl font-bold mb-4\" data-testid=\"text-pricing-amount\">\n                $199\n                <span className=\"text-lg font-normal\">/month</span>\n              </div>\n              <Button \n                onClick={() => setShowDemoModal(true)}\n                className=\"bg-white text-accent px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n                data-testid=\"button-get-started\"\n              >\n                Book Demo & Get Started\n              </Button>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      <DemoModal open={showDemoModal} onOpenChange={setShowDemoModal} />\n    </div>\n  );\n}\n","size_bytes":6680},"replit.md":{"content":"# Overview\n\nThis is a full-stack AI business solutions platform built with React, Express.js, and TypeScript. The application showcases two main AI products: an intelligent business chatbot and an AI-powered recruiting system. It features a modern, responsive frontend with multi-language support, integrated live chat functionality, and demo booking capabilities. The platform is designed as a SaaS solution with product landing pages, interactive demos, and lead generation features.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and bundling\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, accessible UI components\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query (@tanstack/react-query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **UI Components**: Radix UI primitives as the foundation for accessible, customizable components\n\n## Backend Architecture\n- **Server**: Express.js with TypeScript for the REST API\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Session Storage**: In-memory storage with fallback interface for easy migration to persistent storage\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n\n## Internationalization\n- **Multi-language Support**: Custom i18n implementation supporting English and Bengali\n- **Context-based**: React Context API for language state management across components\n- **Type-safe Translations**: TypeScript interfaces ensure translation consistency\n\n## Development Tooling\n- **Build System**: Vite with esbuild for fast builds and hot module replacement\n- **Development Features**: Replit-specific plugins for error overlays and dev banners\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Path Aliases**: Clean import paths using TypeScript path mapping\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: PostgreSQL serverless database (@neondatabase/serverless)\n- **Connection**: Environment-based DATABASE_URL configuration\n\n## AI Services\n- **OpenAI**: GPT integration for chatbot functionality and conversation handling\n- **API Key Management**: Environment variable configuration for secure API access\n\n## UI and Styling Libraries\n- **Radix UI**: Complete set of accessible React components\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n- **React Icons**: Additional icon sets (FontAwesome for social media icons)\n\n## Development Dependencies\n- **Vite**: Build tool and development server\n- **ESBuild**: Fast JavaScript/TypeScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer for vendor prefixes\n\n## Form and Validation\n- **React Hook Form**: Efficient form state management\n- **Zod**: TypeScript-first schema validation\n- **Hookform Resolvers**: Integration between React Hook Form and Zod\n\n## Additional Libraries\n- **date-fns**: Date manipulation and formatting utilities\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **clsx**: Conditional className utility for dynamic styling\n- **cmdk**: Command palette component for enhanced UX","size_bytes":3555},"resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"routes.ts":{"content":"import express from 'express';\nimport { sendBookingEmailAlert } from './email';\n\nconst router = express.Router();\n\n// Example booking endpoint\nrouter.post('/book', async (req, res) => {\n  const { name, email, details } = req.body;\n  // Here you would save the booking to your database\n\n  // Send email alert\n  try {\n    await sendBookingEmailAlert({\n      to: 'erazishfak@gmail.com',\n      subject: 'New Booking Received',\n      text: `Booking from ${name} (${email}):\\n${details}`,\n    });\n    res.status(200).json({ message: 'Booking successful and email sent.' });\n  } catch (error) {\n    res.status(500).json({ message: 'Booking saved, but failed to send email.' });\n  }\n});\n\nexport default router;\n","size_bytes":703},"schema.ts":{"content":"// Product table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: text(\"price\").notNull(),\n  thumbnail: text(\"thumbnail\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Hero section table (single row)\nexport const heroSection = pgTable(\"hero_section\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  subtitle: text(\"subtitle\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pricing table\nexport const pricing = pgTable(\"pricing\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  price: text(\"price\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\nimport { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const demoBookings = pgTable(\"demo_bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  productInterest: text(\"product_interest\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  messages: jsonb(\"messages\").notNull().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertDemoBookingSchema = createInsertSchema(demoBookings).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertDemoBooking = z.infer<typeof insertDemoBookingSchema>;\nexport type DemoBooking = typeof demoBookings.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\n","size_bytes":2184},"scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"storage.ts":{"content":"import { type DemoBooking, type InsertDemoBooking, type ChatSession, type InsertChatSession } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Demo bookings\n  createDemoBooking(booking: InsertDemoBooking): Promise<DemoBooking>;\n  getDemoBookings(): Promise<DemoBooking[]>;\n  \n  // Chat sessions\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  updateChatSession(id: string, messages: any[]): Promise<ChatSession | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private demoBookings: Map<string, DemoBooking>;\n  private chatSessions: Map<string, ChatSession>;\n\n  constructor() {\n    this.demoBookings = new Map();\n    this.chatSessions = new Map();\n  }\n\n  async createDemoBooking(insertBooking: InsertDemoBooking): Promise<DemoBooking> {\n    const id = randomUUID();\n    const booking: DemoBooking = {\n      ...insertBooking,\n      id,\n      company: insertBooking.company || null,\n      status: \"pending\",\n      createdAt: new Date(),\n    };\n    this.demoBookings.set(id, booking);\n    return booking;\n  }\n\n  async getDemoBookings(): Promise<DemoBooking[]> {\n    return Array.from(this.demoBookings.values());\n  }\n\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = {\n      id,\n      messages: insertSession.messages || [],\n      createdAt: new Date(),\n    };\n    this.chatSessions.set(id, session);\n    return session;\n  }\n\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    return this.chatSessions.get(id);\n  }\n\n  async updateChatSession(id: string, messages: any[]): Promise<ChatSession | undefined> {\n    const session = this.chatSessions.get(id);\n    if (session) {\n      session.messages = messages;\n      this.chatSessions.set(id, session);\n      return session;\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2015},"switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"fade-in\": \"fadeIn 0.6s ease-out\",\n        \"slide-up\": \"slideUp 0.4s ease-out\", \n        \"scale-in\": \"scaleIn 0.3s ease-out\",\n        \"pulse-slow\": \"pulse 3s ease-in-out infinite\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        fadeIn: {\n          \"0%\": { opacity: \"0\", transform: \"translateY(10px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        slideUp: {\n          \"0%\": { opacity: \"0\", transform: \"translateY(20px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        scaleIn: {\n          \"0%\": { opacity: \"0\", transform: \"scale(0.95)\" },\n          \"100%\": { opacity: \"1\", transform: \"scale(1)\" },\n        },\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3421},"textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"vite.config.js":{"content":"import react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default {\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(process.cwd(), \"client\", \"src\"),\n      \"@shared\": path.resolve(process.cwd(), \"shared\"),\n      \"@assets\": path.resolve(process.cwd(), \"attached_assets\"),\n    },\n  },\n  root: path.resolve(process.cwd(), \"client\"),\n  build: {\n    outDir: path.resolve(process.cwd(), \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n};","size_bytes":553},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from '../shared/schema';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":245},"server/devViteMiddleware.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = {\n  info: console.log,\n  warn: console.warn,\n  error: console.error,\n};\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  // Import vite using ESM\n  const { createServer } = await import('vite');\n  viteLogger.info('loaded vite');\n\n  let viteConfig: any = {};\n  try {\n    const cfg = await import('../vite.config.js');\n    viteConfig = cfg.default || cfg;\n  } catch (e) {\n    viteLogger.warn('vite config not found, using defaults');\n  }\n\n  const vite = await createServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg: any, options: any) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: 'custom',\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  // Serve from dist/public (not server/public)\n  const distPath = path.resolve(import.meta.dirname, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2592},"server/gemini.ts":{"content":"import fetch from 'node-fetch';\n\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\nexport async function geminiChat(messages: {role: string, content: string}[], companyName: string) {\n  // Compose a prompt for \"Oishy\" from the company\n  const systemPrompt = `You are Oishy, a friendly, helpful, and realistic human assistant from {companyName}.\\nSpeak naturally, use casual language, and always sound human.\\nIf asked about the company, refer to it as {companyName}.`;\n  const fullMessages = [\n    { role: 'user', content: systemPrompt.replace(/{companyName}/g, companyName) },\n    ...messages\n  ];\n\n  const body = {\n    contents: [\n      {\n        role: 'user',\n        parts: [\n          { text: fullMessages.map(m => `${m.role === 'user' ? 'User' : 'Oishy'}: ${m.content}`).join('\\n') }\n        ]\n      }\n    ]\n  };\n\n  const url = `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(body)\n  });\n\n  if (!response.ok) {\n    throw new Error(`Gemini API error: ${response.status} ${await response.text()}`);\n  }\n\n  const data = await response.json();\n  // Gemini returns candidates[0].content.parts[0].text\n  return data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I could not generate a response.';\n}\n","size_bytes":1449},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport fs from 'fs';\nimport path from 'path';\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"../devServer\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Handle development vs production serving\n  const isProd = process.env.NODE_ENV === 'production';\n  if (isProd) {\n    // Check if build directory exists in production\n    const distPath = path.resolve(import.meta.dirname, '..', 'dist', 'public');\n    if (!fs.existsSync(distPath)) {\n      log(`Missing build at ${distPath}. Run: npm run build`, 'server');\n      process.exit(1);\n    }\n    serveStatic(app);\n  } else {\n    await setupVite(app, server);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2284},"server/routes.ts":{"content":"// Pricing\nimport pricingRouter from './booking/pricing';\nimport heroRouter from './booking/hero';\nimport productsRouter from './booking/products';\nimport bookingRouter from './booking/routes';\nimport geminiChatRouter from './booking/gemini-chat';\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertDemoBookingSchema } from \"@shared/schema\";\nimport { geminiChat } from \"./gemini\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Pricing endpoint\n  app.use('/api/pricing', pricingRouter);\n  // Hero section endpoint\n  app.use('/api/hero', heroRouter);\n  // Product management endpoint\n  app.use('/api/products', productsRouter);\n  // Booking system endpoint\n  app.use('/api/booking', bookingRouter);\n  // Gemini chat endpoint\n  app.use('/api/gemini-chat', geminiChatRouter);\n  // Demo booking endpoints\n  app.post(\"/api/demo-bookings\", async (req, res) => {\n    try {\n      const bookingData = insertDemoBookingSchema.parse(req.body);\n      const booking = await storage.createDemoBooking(bookingData);\n      res.json(booking);\n    } catch (error) {\n      res.status(400).json({ \n        message: \"Invalid booking data\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.get(\"/api/demo-bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getDemoBookings();\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to fetch bookings\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Chat endpoints for live demo (Gemini)\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const { message, sessionId, companyName = \"your company\" } = req.body;\n      if (!message) {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n      let session;\n      if (sessionId) {\n        session = await storage.getChatSession(sessionId);\n      }\n      if (!session) {\n        session = await storage.createChatSession({ messages: [] });\n      }\n      const messages = [...(session.messages as any[]), { role: \"user\", content: message }];\n      // Use Gemini API with Oishy persona\n      const aiMessage = await geminiChat(messages, companyName);\n      const updatedMessages = [...messages, { role: \"assistant\", content: aiMessage }];\n      await storage.updateChatSession(session.id, updatedMessages);\n      res.json({\n        response: aiMessage,\n        sessionId: session.id\n      });\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      res.status(500).json({ \n        message: \"Failed to process chat message\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":2908},"server/storage.ts":{"content":"import { type DemoBooking, type InsertDemoBooking, type ChatSession, type InsertChatSession } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Demo bookings\n  createDemoBooking(booking: InsertDemoBooking): Promise<DemoBooking>;\n  getDemoBookings(): Promise<DemoBooking[]>;\n  \n  // Chat sessions\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  updateChatSession(id: string, messages: any[]): Promise<ChatSession | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private demoBookings: Map<string, DemoBooking>;\n  private chatSessions: Map<string, ChatSession>;\n\n  constructor() {\n    this.demoBookings = new Map();\n    this.chatSessions = new Map();\n  }\n\n  async createDemoBooking(insertBooking: InsertDemoBooking): Promise<DemoBooking> {\n    const id = randomUUID();\n    const booking: DemoBooking = {\n      ...insertBooking,\n      id,\n      company: insertBooking.company || null,\n      status: \"pending\",\n      createdAt: new Date(),\n    };\n    this.demoBookings.set(id, booking);\n    return booking;\n  }\n\n  async getDemoBookings(): Promise<DemoBooking[]> {\n    return Array.from(this.demoBookings.values());\n  }\n\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = {\n      id,\n      messages: insertSession.messages || [],\n      createdAt: new Date(),\n    };\n    this.chatSessions.set(id, session);\n    return session;\n  }\n\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    return this.chatSessions.get(id);\n  }\n\n  async updateChatSession(id: string, messages: any[]): Promise<ChatSession | undefined> {\n    const session = this.chatSessions.get(id);\n    if (session) {\n      session.messages = messages;\n      this.chatSessions.set(id, session);\n      return session;\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2015},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\n\n// tiny logger adapter used instead of Vite's createLogger to avoid\n// relying on Vite named exports at module-eval time which can vary\n// between package builds / ESM wrappers.\nconst viteLogger = {\n  info: console.log,\n  warn: console.warn,\n  error: console.error,\n};\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  // Dynamically import Vite and the project's vite config at runtime.\n  // Different distributions export createServer differently (named export,\n  // default, etc). Resolve the factory function flexibly.\n  // Prefer using Node's createRequire to require the package from node_modules\n  // which avoids resolving to local project files that may be named `vite`.\n  const { createRequire } = await import('module');\n  const require = createRequire(import.meta.url);\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const viteMod: any = require('vite');\n  // debug: log exported keys to help diagnose resolution issues\n  try { viteLogger.info('vite module keys: ' + JSON.stringify(Object.keys(viteMod))); } catch (e) {}\n  const createServerFactory = viteMod.createServer ?? viteMod.createViteServer ?? viteMod.default;\n  if (typeof createServerFactory !== 'function') {\n    throw new Error('Could not resolve Vite createServer factory from the installed vite package.');\n  }\n\n  // load vite config if available (TS or JS)\n  let viteConfig: any = {};\n  try {\n    const cfg = await import('../vite.config');\n    viteConfig = cfg?.default ?? cfg;\n  } catch (e) {\n    // best-effort: if there's no config module, continue with defaults\n    viteLogger.warn('vite config not found via dynamic import, using defaults');\n  }\n\n  const vite = await createServerFactory({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg: any, options: any) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: 'custom',\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":3732},"server/viteServer.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = {\n  info: console.log,\n  warn: console.warn,\n  error: console.error,\n};\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  // load vite from node_modules using createRequire so this ESM file\n  // can access the CJS entrypoint\n  const { createRequire } = await import('module');\n  const require = createRequire(import.meta.url);\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const viteMod: any = require('vite');\n  viteLogger.info('loaded vite');\n\n  const keys = Object.keys(viteMod);\n  viteLogger.info('viteMod keys: ' + JSON.stringify(keys));\n  const createServerFactory = viteMod.createServer ?? viteMod.createViteServer ?? viteMod.default;\n  if (typeof createServerFactory !== 'function') {\n    viteLogger.error('viteMod contents:', viteMod);\n    throw new Error('Could not resolve Vite createServer factory from the installed vite package.');\n  }\n\n  let viteConfig: any = {};\n  try {\n    const cfg = require('../vite.config');\n    viteConfig = cfg && cfg.__esModule ? cfg.default : cfg;\n  } catch (e) {\n    viteLogger.warn('vite config not found via require, using defaults');\n  }\n\n  const vite = await createServerFactory({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg: any, options: any) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: 'custom',\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":3206},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Product table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: text(\"price\").notNull(),\n  tag: text(\"tag\"), // Optional product tag\n  status: text(\"status\").notNull().default(\"published\"), // \"published\" | \"upcoming\"\n  thumbnail: text(\"thumbnail\"),\n  features: text(\"features\").array(), // Array of feature bullet points\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Hero section table (single row)\nexport const heroSection = pgTable(\"hero_section\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  subtitle: text(\"subtitle\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pricing table\nexport const pricing = pgTable(\"pricing\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  price: text(\"price\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const demoBookings = pgTable(\"demo_bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  productInterest: text(\"product_interest\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  messages: jsonb(\"messages\").notNull().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertDemoBookingSchema = createInsertSchema(demoBookings).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Product schemas with validation\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  status: z.enum([\"published\", \"upcoming\"]).default(\"published\"),\n  features: z.array(z.string()).optional(),\n});\n\nexport const updateProductSchema = z.object({\n  name: z.string().optional(),\n  description: z.string().optional(),\n  price: z.string().optional(),\n  tag: z.string().nullable().optional(),\n  status: z.enum([\"published\", \"upcoming\"]).optional(),\n  features: z.array(z.string()).optional(),\n});\n\nexport const insertPricingSchema = createInsertSchema(pricing).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertDemoBooking = z.infer<typeof insertDemoBookingSchema>;\nexport type DemoBooking = typeof demoBookings.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Pricing = typeof pricing.$inferSelect;\nexport type InsertPricing = z.infer<typeof insertPricingSchema>;\n","size_bytes":3282},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/components/language-provider\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport Home from \"@/pages/home\";\nimport ProductGrid from \"@/pages/products\";\nimport ChatbotProduct from \"@/pages/chatbot-product\";\nimport RecruitingProduct from \"@/pages/recruiting-product\";\nimport NotFound from \"@/pages/not-found\";\nimport AISolutionsPage from \"@/pages/ai-solutions\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport ManageProducts from \"@/pages/admin-products\";\nimport EditHeroSection from \"@/pages/admin-hero\";\nimport EditPricing from \"@/pages/admin-pricing\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={ProductGrid} />\n      <Route path=\"/chatbot\" component={ChatbotProduct} />\n      <Route path=\"/chatbot-product\" component={ChatbotProduct} />\n      <Route path=\"/recruiting\" component={RecruitingProduct} />\n      <Route path=\"/recruiting-product\" component={RecruitingProduct} />\n      <Route path=\"/ai-solutions\" component={AISolutionsPage} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/admin/products\" component={ManageProducts} />\n      <Route path=\"/admin/hero\" component={EditHeroSection} />\n      <Route path=\"/admin/pricing\" component={EditPricing} />\n      <Route path=\"*\" component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <LanguageProvider>\n          <div className=\"min-h-screen flex flex-col\">\n            <Navbar />\n            <main className=\"flex-1\">\n              <Router />\n            </main>\n            <Footer />\n          </div>\n          <Toaster />\n        </LanguageProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2156},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(186, 100%, 44%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(186, 100%, 44%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(186, 100%, 44%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(186, 100%, 44%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(186, 100%, 44%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(186, 100%, 44%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer utilities {\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(186, 100%, 44%) 0%, hsl(186, 100%, 34%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .chat-demo {\n    background: linear-gradient(135deg, hsl(210, 40%, 98%) 0%, hsl(186, 30%, 95%) 100%);\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.4s ease-out;\n}\n\n.animate-scale-in {\n  animation: scaleIn 0.3s ease-out;\n}\n\n.animate-pulse-slow {\n  animation: pulse 3s ease-in-out infinite;\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes scaleIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.feature-card:hover {\n  transform: translateY(-4px);\n  transition: all 0.3s ease;\n}\n\n.workflow-step {\n  position: relative;\n  padding: 20px;\n  margin-bottom: 20px;\n  border-radius: 12px;\n  background: white;\n  border: 2px solid hsl(214.3, 31.8%, 91.4%);\n  transition: all 0.3s ease;\n}\n\n.workflow-step:hover {\n  border-color: hsl(186, 100%, 44%);\n  box-shadow: 0 4px 20px hsla(186, 100%, 44%, 0.1);\n}\n\n.workflow-step::after {\n  content: '↓';\n  position: absolute;\n  bottom: -35px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 24px;\n  color: hsl(186, 100%, 44%);\n  font-weight: bold;\n}\n\n.workflow-step:last-child::after {\n  display: none;\n}\n\n.typing-indicator {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.typing-dot {\n  width: 6px;\n  height: 6px;\n  background: hsl(186, 100%, 44%);\n  border-radius: 50%;\n  animation: typing 1.4s infinite ease-in-out;\n}\n\n.typing-dot:nth-child(2) { \n  animation-delay: 0.2s; \n}\n\n.typing-dot:nth-child(3) { \n  animation-delay: 0.4s; \n}\n\n@keyframes typing {\n  0%, 60%, 100% { \n    transform: scale(1); \n    opacity: 0.7; \n  }\n  30% { \n    transform: scale(1.2); \n    opacity: 1; \n  }\n}\n\n@keyframes scroll {\n  0% {\n    transform: translateX(0);\n  }\n  100% {\n    transform: translateX(-50%);\n  }\n}\n\n.animate-scroll {\n  animation: scroll 30s linear infinite;\n}\n","size_bytes":4174},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/booking/email.ts":{"content":"import nodemailer from 'nodemailer';\n\nexport async function sendBookingEmailAlert({ to, subject, text }: { to: string; subject: string; text: string }) {\n  const transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASS,\n    },\n  });\n\n  await transporter.sendMail({\n    from: process.env.EMAIL_USER,\n    to,\n    subject,\n    text,\n  });\n}\n","size_bytes":429},"server/booking/gemini-chat.ts":{"content":"import express from 'express';\nimport axios from 'axios';\n\nconst router = express.Router();\n\n// Gemini system prompt for Oishy\nconst SYSTEM_PROMPT = `You are Oishy, a friendly, helpful, and knowledgeable human representative from {company name}. Always respond in a warm, conversational, and human-like manner. Use natural language, show empathy, and personalize your responses. If you don’t know something, say so honestly. Never mention you are an AI or chatbot.`;\n\n// Gemini API endpoint\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\n\nrouter.post('/', async (req, res) => {\n  const { message, sessionId } = req.body;\n  if (!message) {\n    return res.status(400).json({ message: 'Message is required' });\n  }\n  try {\n    const apiKey = process.env.GEMINI_API_KEY;\n    if (!apiKey) {\n      return res.status(500).json({ message: 'Gemini API key not set' });\n    }\n    const response = await axios.post(\n      `${GEMINI_API_URL}?key=${apiKey}`,\n      {\n        contents: [\n          { role: 'user', parts: [{ text: SYSTEM_PROMPT }] },\n          { role: 'user', parts: [{ text: message }] }\n        ]\n      }\n    );\n    const aiMessage = response.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I could not generate a response.';\n    res.json({ response: aiMessage, sessionId: sessionId || null });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to process chat message', error: error.message });\n  }\n});\n\nexport default router;\n","size_bytes":1526},"server/booking/hero.ts":{"content":"import express from 'express';\nimport { db } from '../db';\nimport { heroSection } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = express.Router();\n\n// Always use the first row (single hero section)\nrouter.get('/', async (req, res) => {\n  let hero = await db.select().from(heroSection).limit(1);\n  if (!hero.length) {\n    // Insert default if not present\n    const inserted = await db.insert(heroSection).values({\n      title: 'Transform Your Business with AI Solutions',\n      subtitle: 'Discover powerful AI tools designed for local businesses. From intelligent chatbots to automated recruiting systems, we have the solutions to streamline your operations.'\n    }).returning();\n    return res.json(inserted[0]);\n  }\n  res.json(hero[0]);\n});\n\nrouter.put('/', async (req, res) => {\n  const { title, subtitle } = req.body;\n  let hero = await db.select().from(heroSection).limit(1);\n  if (!hero.length) {\n    const inserted = await db.insert(heroSection).values({ title, subtitle }).returning();\n    return res.json(inserted[0]);\n  }\n  const [updated] = await db.update(heroSection).set({ title, subtitle }).where(eq(heroSection.id, hero[0].id)).returning();\n  res.json(updated);\n});\n\nexport default router;\n","size_bytes":1236},"server/booking/pricing.ts":{"content":"import express from 'express';\nimport { db } from '../db';\nimport { pricing as pricingTable } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst router = express.Router();\n\n// Get all pricing entries\nrouter.get('/', async (req, res) => {\n  const allPricing = await db.select().from(pricingTable);\n  res.json(allPricing);\n});\n\n// Update a pricing entry by id\nrouter.put('/:id', async (req, res) => {\n  const { id } = req.params;\n  const { price } = req.body;\n  // Only update price\n  const [updated] = await db.update(pricingTable)\n    .set({ price: String(price) })\n    .where(eq(pricingTable.id, id))\n    .returning();\n  if (!updated) return res.status(404).json({ message: 'Not found' });\n  res.json(updated);\n});\n\nexport default router;\n","size_bytes":758},"server/booking/products.ts":{"content":"import express from 'express';\nimport multer from 'multer';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { db } from '../db';\nimport { products as productsTable, insertProductSchema, updateProductSchema } from '../../shared/schema';\nimport { eq, like, ilike, and } from 'drizzle-orm';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// No in-memory store; use DB\n\n// Query validation schema\nconst getProductsQuerySchema = z.object({\n  status: z.enum(['published', 'upcoming']).optional(),\n  tag: z.string().min(1).optional(),\n});\n\n// Simple admin authentication middleware\nconst adminAuth = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n  \n  // Simple token check - replace with proper auth later\n  if (!token || token !== 'admin-token') {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  \n  next();\n};\n\n// Multer error handling middleware\nconst handleMulterError = (error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  if (error instanceof multer.MulterError) {\n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({ message: 'File too large. Maximum size is 5MB.' });\n    }\n    if (error.code === 'LIMIT_UNEXPECTED_FILE') {\n      return res.status(400).json({ message: 'Unexpected file field.' });\n    }\n    return res.status(400).json({ message: `Upload error: ${error.message}` });\n  }\n  \n  if (error.message.includes('Invalid file type')) {\n    return res.status(400).json({ message: error.message });\n  }\n  \n  next(error);\n};\n\n// Multer setup for thumbnail uploads (ESM compatible)\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Enhanced multer configuration with file type and size validation\nconst upload = multer({\n  dest: path.join(__dirname, '../../client/public/uploads'),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow common image formats\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/svg+xml'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPEG, PNG, WebP, and SVG are allowed.'));\n    }\n  },\n});\n\nrouter.get('/', async (req, res) => {\n  try {\n    // Validate query parameters\n    const validatedQuery = getProductsQuerySchema.parse(req.query);\n    const { status, tag } = validatedQuery;\n    \n    // Build where conditions array\n    const whereConditions = [];\n    \n    if (status) {\n      whereConditions.push(eq(productsTable.status, status));\n    }\n    \n    if (tag) {\n      whereConditions.push(ilike(productsTable.tag, `%${tag}%`));\n    }\n    \n    // Execute query with properly combined conditions\n    const dbProducts = whereConditions.length > 0 \n      ? await db.select().from(productsTable).where(and(...whereConditions))\n      : await db.select().from(productsTable);\n    \n    res.json(dbProducts);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Invalid query parameters', \n        errors: error.errors \n      });\n    }\n    console.error('Error fetching products:', error);\n    res.status(500).json({ message: 'Failed to fetch products' });\n  }\n});\n\nrouter.post('/', adminAuth, upload.single('thumbnail'), handleMulterError, async (req: express.Request, res: express.Response) => {\n  try {\n    // Parse features from JSON string if provided\n    let features;\n    if (req.body.features) {\n      try {\n        features = JSON.parse(req.body.features);\n      } catch (error) {\n        return res.status(400).json({ message: 'Invalid features format. Must be valid JSON array.' });\n      }\n    }\n\n    // Validate the request body\n    const validatedData = insertProductSchema.parse({\n      name: req.body.name,\n      description: req.body.description,\n      price: req.body.price,\n      tag: req.body.tag || null,\n      status: req.body.status || 'published',\n      features: features,\n    });\n    \n    let thumbnail = '';\n    const file = (req as any).file;\n    if (file) {\n      thumbnail = `/uploads/${file.filename}`;\n    }\n    \n    const [product] = await db.insert(productsTable).values({ \n      ...validatedData, \n      thumbnail \n    }).returning();\n    \n    res.status(201).json(product);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error creating product:', error);\n    res.status(500).json({ message: 'Failed to create product' });\n  }\n});\n\nrouter.put('/:id', adminAuth, upload.single('thumbnail'), handleMulterError, async (req: express.Request, res: express.Response) => {\n  try {\n    const { id } = req.params;\n    \n    // Parse features from JSON string if provided\n    let features;\n    if (req.body.features) {\n      try {\n        features = JSON.parse(req.body.features);\n      } catch (error) {\n        return res.status(400).json({ message: 'Invalid features format. Must be valid JSON array.' });\n      }\n    }\n    \n    // Validate the request body (partial update)\n    const validatedData = updateProductSchema.parse({\n      name: req.body.name,\n      description: req.body.description,\n      price: req.body.price,\n      tag: req.body.tag,\n      status: req.body.status,\n      features: features,\n    });\n    \n    // Remove undefined values for partial update\n    const updateData = Object.fromEntries(\n      Object.entries(validatedData).filter(([_, value]) => value !== undefined)\n    );\n    \n    const file = (req as any).file;\n    if (file) {\n      updateData.thumbnail = `/uploads/${file.filename}`;\n    }\n    \n    const [product] = await db.update(productsTable)\n      .set(updateData)\n      .where(eq(productsTable.id, id))\n      .returning();\n      \n    if (!product) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n    \n    res.json(product);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error updating product:', error);\n    res.status(500).json({ message: 'Failed to update product' });\n  }\n});\n\nrouter.delete('/:id', adminAuth, async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Check if product exists before deleting\n    const existingProduct = await db.select()\n      .from(productsTable)\n      .where(eq(productsTable.id, id))\n      .limit(1);\n      \n    if (existingProduct.length === 0) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n    \n    await db.delete(productsTable).where(eq(productsTable.id, id));\n    res.status(204).end();\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    res.status(500).json({ message: 'Failed to delete product' });\n  }\n});\n\nexport default router;\n","size_bytes":7136},"server/booking/routes.ts":{"content":"import express from 'express';\nimport { sendBookingEmailAlert } from './email';\n\nconst router = express.Router();\n\n// Example booking endpoint\nrouter.post('/book', async (req, res) => {\n  const { name, email, details } = req.body;\n  // Here you would save the booking to your database\n\n  // Send email alert\n  try {\n    await sendBookingEmailAlert({\n      to: 'erazishfak@gmail.com',\n      subject: 'New Booking Received',\n      text: `Booking from ${name} (${email}):\\n${details}`,\n    });\n    res.status(200).json({ message: 'Booking successful and email sent.' });\n  } catch (error) {\n    res.status(500).json({ message: 'Booking saved, but failed to send email.' });\n  }\n});\n\nexport default router;\n","size_bytes":703},"client/src/components/admin-sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\n\nconst links = [\n  { href: '/admin', label: 'Dashboard' },\n  { href: '/admin/products', label: 'Products' },\n  { href: '/admin/hero', label: 'Hero Section' },\n  { href: '/admin/pricing', label: 'Pricing' },\n];\n\nexport function AdminSidebar() {\n  const [location] = useLocation();\n  return (\n    <aside className=\"w-64 min-h-screen bg-gray-50 border-r px-4 py-8 flex flex-col gap-2\">\n      <div className=\"text-2xl font-bold mb-8 text-primary\">Admin Panel</div>\n      {links.map(link => (\n        <Link\n          key={link.href}\n          href={link.href}\n          className={`block px-4 py-2 rounded hover:bg-primary/10 transition-colors font-medium ${location === link.href ? 'bg-primary/10 text-primary' : 'text-gray-700'}`}\n        >\n          {link.label}\n        </Link>\n      ))}\n    </aside>\n  );\n}\n","size_bytes":851},"client/src/components/chat-demo.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card } from '@/components/ui/card';\nimport { sendChatMessage, type ChatMessage } from '@/lib/openai';\nimport { Bot, Send, User } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function ChatDemo() {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      role: 'assistant',\n      content: \"Hello! I'm your AI business assistant. I can help you with inventory, orders, and customer inquiries. What would you like to know?\",\n    },\n  ]);\n  const [input, setInput] = useState('');\n  const [sessionId, setSessionId] = useState<string>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isTyping]);\n\n  const handleSendMessage = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput('');\n    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);\n    setIsLoading(true);\n    setIsTyping(true);\n\n    try {\n      const response = await sendChatMessage(userMessage, sessionId);\n      \n      // Add a small delay to simulate typing\n      setTimeout(() => {\n        setIsTyping(false);\n        setMessages(prev => [...prev, { role: 'assistant', content: response.response }]);\n        setSessionId(response.sessionId);\n      }, 1500);\n    } catch (error) {\n      setIsTyping(false);\n      toast({\n        title: \"Chat Error\",\n        description: error instanceof Error ? error.message : \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const sendQuickMessage = (message: string) => {\n    setInput(message);\n    setTimeout(() => handleSendMessage(), 100);\n  };\n\n  const TypingIndicator = () => (\n    <div className=\"flex items-start gap-3\">\n      <div className=\"bg-primary text-primary-foreground rounded-lg p-3\">\n        <div className=\"typing-indicator\">\n          <div className=\"typing-dot\"></div>\n          <div className=\"typing-dot\"></div>\n          <div className=\"typing-dot\"></div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-4xl mx-auto grid md:grid-cols-2 gap-8\">\n      {/* Chat Interface */}\n      <div className=\"chat-demo rounded-lg p-6 border border-border\">\n        <Card className=\"p-4 shadow-sm\">\n          <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n            <Bot className=\"h-5 w-5 text-primary\" />\n            AI Business Assistant\n          </h4>\n          \n          <div className=\"space-y-3 min-h-[300px] max-h-[300px] overflow-y-auto mb-4\" data-testid=\"chat-messages\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`flex items-start gap-3 animate-slide-up ${\n                  message.role === 'user' ? 'justify-end' : ''\n                }`}\n                data-testid={`message-${message.role}-${index}`}\n              >\n                {message.role === 'assistant' && (\n                  <Bot className=\"h-4 w-4 text-primary mt-1\" />\n                )}\n                <div\n                  className={`rounded-lg p-3 max-w-xs ${\n                    message.role === 'user'\n                      ? 'bg-secondary text-secondary-foreground'\n                      : 'bg-primary text-primary-foreground'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.content}</p>\n                </div>\n                {message.role === 'user' && (\n                  <User className=\"h-4 w-4 text-muted-foreground mt-1\" />\n                )}\n              </div>\n            ))}\n            \n            {isTyping && <TypingIndicator />}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Input\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Ask about inventory, place an order, or any business question...\"\n              className=\"flex-1\"\n              disabled={isLoading}\n              data-testid=\"input-chat\"\n            />\n            <Button \n              onClick={handleSendMessage}\n              disabled={isLoading || !input.trim()}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"flex gap-2 mt-3 flex-wrap\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => sendQuickMessage('Check inventory for iPhone 15')}\n              disabled={isLoading}\n              data-testid=\"button-quick-inventory\"\n            >\n              Check Inventory\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => sendQuickMessage('Place order for 2 laptops')}\n              disabled={isLoading}\n              data-testid=\"button-quick-order\"\n            >\n              Place Order\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => sendQuickMessage('What are your business hours?')}\n              disabled={isLoading}\n              data-testid=\"button-quick-hours\"\n            >\n              Business Hours\n            </Button>\n          </div>\n        </Card>\n      </div>\n      \n      {/* Features Highlight */}\n      <div className=\"space-y-6\">\n        <Card className=\"p-6 border border-border\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"bg-primary/10 p-2 rounded-lg\">\n              <i className=\"fas fa-database text-primary text-lg\"></i>\n            </div>\n            <h4 className=\"font-semibold\">Real-time Data Integration</h4>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Connects to your database for live inventory updates and customer information\n          </p>\n        </Card>\n        \n        <Card className=\"p-6 border border-border\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"bg-primary/10 p-2 rounded-lg\">\n              <i className=\"fas fa-image text-primary text-lg\"></i>\n            </div>\n            <h4 className=\"font-semibold\">Image Processing</h4>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Analyzes product images and provides detailed information and recommendations\n          </p>\n        </Card>\n        \n        <Card className=\"p-6 border border-border\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"bg-primary/10 p-2 rounded-lg\">\n              <i className=\"fas fa-shopping-cart text-primary text-lg\"></i>\n            </div>\n            <h4 className=\"font-semibold\">Order Management</h4>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Processes orders directly and updates your Excel sheets automatically\n          </p>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7741},"client/src/components/demo-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useLanguage } from '@/components/language-provider';\nimport { Calendar } from 'lucide-react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface DemoModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface DemoBookingForm {\n  fullName: string;\n  email: string;\n  company: string;\n  productInterest: string;\n}\n\nexport function DemoModal({ open, onOpenChange }: DemoModalProps) {\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState<DemoBookingForm>({\n    fullName: '',\n    email: '',\n    company: '',\n    productInterest: 'AI Business Chatbot',\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: DemoBookingForm) => {\n      const response = await apiRequest('POST', '/api/demo-bookings', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demo booked successfully!\",\n        description: \"We'll contact you within 24 hours to schedule your personalized demo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/demo-bookings'] });\n      onOpenChange(false);\n      setFormData({\n        fullName: '',\n        email: '',\n        company: '',\n        productInterest: 'AI Business Chatbot',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking failed\",\n        description: error instanceof Error ? error.message : \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    bookingMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof DemoBookingForm, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md animate-scale-in\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <Calendar className=\"h-12 w-12 text-primary\" />\n          </div>\n          <DialogTitle className=\"text-2xl font-bold\">{t.demo.title}</DialogTitle>\n          <p className=\"text-muted-foreground\">{t.demo.subtitle}</p>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"fullName\" className=\"text-sm font-medium\">\n              {t.demo.fullName}\n            </Label>\n            <Input\n              id=\"fullName\"\n              type=\"text\"\n              placeholder=\"Your full name\"\n              value={formData.fullName}\n              onChange={(e) => handleInputChange('fullName', e.target.value)}\n              required\n              data-testid=\"input-full-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n              {t.demo.email}\n            </Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"your@email.com\"\n              value={formData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"company\" className=\"text-sm font-medium\">\n              {t.demo.company}\n            </Label>\n            <Input\n              id=\"company\"\n              type=\"text\"\n              placeholder=\"Your company name\"\n              value={formData.company}\n              onChange={(e) => handleInputChange('company', e.target.value)}\n              data-testid=\"input-company\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"productInterest\" className=\"text-sm font-medium\">\n              {t.demo.productInterest}\n            </Label>\n            <Select value={formData.productInterest} onValueChange={(value) => handleInputChange('productInterest', value)}>\n              <SelectTrigger data-testid=\"select-product-interest\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"AI Business Chatbot\">AI Business Chatbot</SelectItem>\n                <SelectItem value=\"Automated Recruiting System\">Automated Recruiting System</SelectItem>\n                <SelectItem value=\"Both Products\">Both Products</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"flex gap-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"flex-1\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              {t.demo.cancel}\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n              disabled={bookingMutation.isPending}\n              data-testid=\"button-book-demo\"\n            >\n              {bookingMutation.isPending ? \"Booking...\" : t.demo.book}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5776},"client/src/components/footer.tsx":{"content":"import { useLanguage } from '@/components/language-provider';\nimport { Brain } from 'lucide-react';\nimport { FaTwitter, FaFacebook, FaLinkedin } from 'react-icons/fa';\n\nexport function Footer() {\n  const { t } = useLanguage();\n\n  return (\n    <footer className=\"bg-secondary/30 py-12 border-t border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Brain className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-xl font-bold gradient-text\">AI Solutions</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              {t.footer.description}\n            </p>\n            <div className=\"flex space-x-4\">\n              <FaTwitter className=\"text-muted-foreground hover:text-primary cursor-pointer transition-colors\" data-testid=\"link-twitter\" />\n              <FaFacebook className=\"text-muted-foreground hover:text-primary cursor-pointer transition-colors\" data-testid=\"link-facebook\" />\n              <FaLinkedin className=\"text-muted-foreground hover:text-primary cursor-pointer transition-colors\" data-testid=\"link-linkedin\" />\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">{t.footer.products}</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li><a href=\"/chatbot-product\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-chatbot\">AI Business Chatbot</a></li>\n              <li><a href=\"/recruiting-product\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-recruiting\">Recruiting System</a></li>\n              <li><a href=\"/products\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-coming-soon\">Coming Soon</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">{t.footer.support}</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-docs\">Documentation</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-support\">Contact Support</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-book-demo\">Book Demo</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">{t.footer.contact}</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li data-testid=\"text-email\">support@aisolutions.com</li>\n              <li data-testid=\"text-phone\">+1 (555) 123-4567</li>\n              <li data-testid=\"text-address\">San Francisco, CA</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-8 pt-8 text-center text-muted-foreground\">\n          <p data-testid=\"text-copyright\">{t.footer.copyright}</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3147},"client/src/components/language-provider.tsx":{"content":"import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { translations, type Language, type Translation } from '@/lib/i18n';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: Translation;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>('en');\n\n  const value = {\n    language,\n    setLanguage,\n    t: translations[language],\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":899},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useLanguage } from '@/components/language-provider';\nimport { type Language } from '@/lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Brain } from 'lucide-react';\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const { language, setLanguage, t } = useLanguage();\n\n  return (\n    <nav className=\"sticky top-0 z-50 mx-4 mt-4 rounded-2xl bg-white border border-primary/20 shadow-lg\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <span className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n                <Brain className=\"h-8 w-8 text-primary\" />\n                <span className=\"text-xl font-bold gradient-text\">AI Solutions</span>\n              </span>\n            </Link>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/\">\n              <span className={`font-medium transition-colors hover:text-primary ${location === '/' ? 'text-primary' : 'text-foreground'}`} data-testid=\"link-nav-home\">{t.nav.home}</span>\n            </Link>\n            <Link href=\"/products\">\n              <span className={`font-medium transition-colors hover:text-primary ${location === '/products' ? 'text-primary' : 'text-foreground'}`} data-testid=\"link-nav-products\">{t.nav.products}</span>\n            </Link>\n            <a href=\"#pricing\" className=\"text-foreground hover:text-primary transition-colors font-medium\" data-testid=\"link-nav-pricing\">\n              {t.nav.pricing}\n            </a>\n            <a href=\"#contact\" className=\"text-foreground hover:text-primary transition-colors font-medium\" data-testid=\"link-nav-contact\">\n              {t.nav.contact}\n            </a>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Select value={language} onValueChange={(value: Language) => setLanguage(value)}>\n              <SelectTrigger className=\"w-[120px]\" data-testid=\"select-language\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"en\">English</SelectItem>\n                <SelectItem value=\"bn\">বাংলা</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"button-get-started\">\n              {t.nav.getStarted}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2798},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/i18n.ts":{"content":"export interface Translation {\n  nav: {\n    home: string;\n    products: string;\n    pricing: string;\n    contact: string;\n    getStarted: string;\n  };\n  hero: {\n    title: string;\n    subtitle: string;\n    exploreProducts: string;\n    bookDemo: string;\n  };\n  products: {\n    title: string;\n    subtitle: string;\n    chatbot: {\n      title: string;\n      subtitle: string;\n      description: string;\n      features: string[];\n      price: string;\n      currency: string;\n      learnMore: string;\n    };\n    recruiting: {\n      title: string;\n      subtitle: string;\n      description: string;\n      features: string[];\n      price: string;\n      currency: string;\n      learnMore: string;\n    };\n  };\n  demo: {\n    title: string;\n    subtitle: string;\n    fullName: string;\n    email: string;\n    company: string;\n    productInterest: string;\n    cancel: string;\n    book: string;\n  };\n  footer: {\n    description: string;\n    products: string;\n    support: string;\n    contact: string;\n    copyright: string;\n  };\n}\n\nconst english: Translation = {\n  nav: {\n    home: \"Home\",\n    products: \"Products\", \n    pricing: \"Pricing\",\n    contact: \"Contact\",\n    getStarted: \"Get Started\",\n  },\n  hero: {\n    title: \"Transform Your Business with AI Solutions\",\n    subtitle: \"Discover powerful AI tools designed for local businesses. From intelligent chatbots to automated recruiting systems, we have the solutions to streamline your operations.\",\n    exploreProducts: \"Explore Products\",\n    bookDemo: \"Book a Demo\",\n  },\n  products: {\n    title: \"Our AI Solutions\",\n    subtitle: \"Choose from our cutting-edge AI products designed to revolutionize your business operations\",\n    chatbot: {\n      title: \"AI Business Chatbot\",\n      subtitle: \"Most Popular • Real-time Integration\",\n      description: \"Intelligent chatbot that handles customer inquiries, manages inventory, processes orders, and integrates with WhatsApp and Messenger for seamless customer service.\",\n      features: [\n        \"Real-time data responses\",\n        \"Image query processing\", \n        \"Inventory management\",\n        \"Multi-platform integration\"\n      ],\n      price: \"$299\",\n      currency: \"/month\",\n      learnMore: \"Learn More\",\n    },\n    recruiting: {\n      title: \"Automated Recruiting System\",\n      subtitle: \"Time Saver • AI-Powered Screening\",\n      description: \"Streamline your hiring process with AI-powered CV screening, automatic parsing, keyword matching, and intelligent candidate qualification scoring.\",\n      features: [\n        \"Automated CV screening\",\n        \"Smart data parsing\",\n        \"Keyword matching & scoring\",\n        \"Google Sheets integration\"\n      ],\n      price: \"$199\",\n      currency: \"/month\",\n      learnMore: \"Learn More\",\n    },\n  },\n  demo: {\n    title: \"Book Your Demo\",\n    subtitle: \"Get a personalized demonstration of our AI solutions\",\n    fullName: \"Full Name\",\n    email: \"Email\",\n    company: \"Company\",\n    productInterest: \"Product Interest\",\n    cancel: \"Cancel\",\n    book: \"Book Demo\",\n  },\n  footer: {\n    description: \"Empowering local businesses with cutting-edge AI technology.\",\n    products: \"Products\",\n    support: \"Support\", \n    contact: \"Contact\",\n    copyright: \"© 2024 AI Solutions. All rights reserved.\",\n  },\n};\n\nconst bangla: Translation = {\n  nav: {\n    home: \"হোম\",\n    products: \"পণ্য\",\n    pricing: \"মূল্য\",\n    contact: \"যোগাযোগ\",\n    getStarted: \"শুরু করুন\",\n  },\n  hero: {\n    title: \"AI সমাধান দিয়ে আপনার ব্যবসা রূপান্তরিত করুন\",\n    subtitle: \"স্থানীয় ব্যবসার জন্য ডিজাইন করা শক্তিশালী AI টুলস আবিষ্কার করুন। বুদ্ধিমান চ্যাটবট থেকে স্বয়ংক্রিয় নিয়োগ সিস্টেম পর্যন্ত, আমাদের কাছে আপনার কার্যক্রম সুগম করার সমাধান রয়েছে।\",\n    exploreProducts: \"পণ্য দেখুন\",\n    bookDemo: \"ডেমো বুক করুন\",\n  },\n  products: {\n    title: \"আমাদের AI সমাধান\",\n    subtitle: \"আপনার ব্যবসায়িক কার্যক্রম বিপ্লব ঘটানোর জন্য ডিজাইন করা আমাদের অত্যাধুনিক AI পণ্য থেকে বেছে নিন\",\n    chatbot: {\n      title: \"AI ব্যবসায়িক চ্যাটবট\",\n      subtitle: \"সর্বাধিক জনপ্রিয় • রিয়েল-টাইম ইন্টিগ্রেশন\",\n      description: \"বুদ্ধিমান চ্যাটবট যা গ্রাহকের অনুসন্ধান পরিচালনা করে, ইনভেন্টরি পরিচালনা করে, অর্ডার প্রক্রিয়া করে এবং নিরবচ্ছিন্ন গ্রাহক সেবার জন্য WhatsApp এবং Messenger এর সাথে একীভূত হয়।\",\n      features: [\n        \"রিয়েল-টাইম ডেটা প্রতিক্রিয়া\",\n        \"ছবির অনুসন্ধান প্রক্রিয়াকরণ\",\n        \"ইনভেন্টরি ব্যবস্থাপনা\",\n        \"মাল্টি-প্ল্যাটফর্ম ইন্টিগ্রেশন\"\n      ],\n      price: \"৳২৫,০০০\",\n      currency: \"/মাস\",\n      learnMore: \"আরও জানুন\",\n    },\n    recruiting: {\n      title: \"স্বয়ংক্রিয় নিয়োগ সিস্টেম\",\n      subtitle: \"সময় সাশ্রয়ী • AI-চালিত স্ক্রিনিং\",\n      description: \"AI-চালিত CV স্ক্রিনিং, স্বয়ংক্রিয় পার্সিং, কীওয়ার্ড ম্যাচিং এবং বুদ্ধিমান প্রার্থী যোগ্যতা স্কোরিং দিয়ে আপনার নিয়োগ প্রক্রিয়া সুগম করুন।\",\n      features: [\n        \"স্বয়ংক্রিয় CV স্ক্রিনিং\",\n        \"স্মার্ট ডেটা পার্সিং\",\n        \"কীওয়ার্ড ম্যাচিং ও স্কোরিং\",\n        \"Google Sheets ইন্টিগ্রেশন\"\n      ],\n      price: \"৳১৬,৫০০\",\n      currency: \"/মাস\",\n      learnMore: \"আরও জানুন\",\n    },\n  },\n  demo: {\n    title: \"আপনার ডেমো বুক করুন\",\n    subtitle: \"আমাদের AI সমাধানের ব্যক্তিগতকৃত প্রদর্শনী পান\",\n    fullName: \"পূর্ণ নাম\",\n    email: \"ইমেইল\",\n    company: \"কোম্পানি\",\n    productInterest: \"পণ্যের আগ্রহ\",\n    cancel: \"বাতিল\",\n    book: \"ডেমো বুক করুন\",\n  },\n  footer: {\n    description: \"অত্যাধুনিক AI প্রযুক্তি দিয়ে স্থানীয় ব্যবসাকে ক্ষমতায়ন।\",\n    products: \"পণ্য\",\n    support: \"সহায়তা\",\n    contact: \"যোগাযোগ\",\n    copyright: \"© ২০২৪ AI সমাধান। সর্বস্বত্ব সংরক্ষিত।\",\n  },\n};\n\nexport const translations = {\n  en: english,\n  bn: bangla,\n};\n\nexport type Language = keyof typeof translations;\n","size_bytes":7837},"client/src/lib/openai.ts":{"content":"import { apiRequest } from '@/lib/queryClient';\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface ChatResponse {\n  response: string;\n  sessionId: string;\n}\n\nexport async function sendChatMessage(message: string, sessionId?: string): Promise<ChatResponse> {\n  try {\n    const response = await apiRequest('POST', '/api/chat', {\n      message,\n      sessionId,\n    });\n    \n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to send chat message');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    throw new Error(error instanceof Error ? error.message : 'Chat service unavailable');\n  }\n}\n","size_bytes":721},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/siteQueries.ts":{"content":"import { useQuery, useQueryClient, QueryClient } from '@tanstack/react-query';\n\nexport function useHeroQuery() {\n  return useQuery({\n    queryKey: ['/api/hero'],\n    queryFn: async () => {\n      const res = await fetch('/api/hero');\n      if (!res.ok) throw new Error('Failed to load hero');\n      return res.json();\n    },\n  });\n}\n\nexport function usePricingQuery() {\n  return useQuery({\n    queryKey: ['/api/pricing'],\n    queryFn: async () => {\n      const res = await fetch('/api/pricing');\n      if (!res.ok) throw new Error('Failed to load pricing');\n      return res.json();\n    },\n  });\n}\n\nexport function useProductsQuery(options?: { status?: 'published' | 'upcoming' }) {\n  const { status } = options || {};\n  \n  return useQuery({\n    queryKey: status ? ['/api/products', { status }] : ['/api/products'],\n    queryFn: async () => {\n      const url = status ? `/api/products?status=${status}` : '/api/products';\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Failed to load products');\n      return res.json();\n    },\n  });\n}\n\nexport function invalidateSiteQueries(queryClient: QueryClient) {\n  queryClient.invalidateQueries({ queryKey: ['/api/hero'] });\n  queryClient.invalidateQueries({ queryKey: ['/api/pricing'] });\n  queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n}\n\nexport type SiteQueryKeys = '/api/hero' | '/api/pricing' | '/api/products';\n","size_bytes":1399},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import React from \"react\";\n\nexport default function AdminDashboard() {\n  return (\n    <div className=\"max-w-4xl mx-auto py-12 px-4\">\n      <h1 className=\"text-3xl font-bold mb-6\">Admin Dashboard</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <a href=\"/admin/products\" className=\"block border rounded-lg p-6 shadow-sm bg-white hover:bg-gray-50\">\n          <h2 className=\"text-xl font-semibold mb-2\">Manage Products</h2>\n          <p>Edit, add, or remove products and thumbnails.</p>\n        </a>\n        <a href=\"/admin/hero\" className=\"block border rounded-lg p-6 shadow-sm bg-white hover:bg-gray-50\">\n          <h2 className=\"text-xl font-semibold mb-2\">Edit Hero Section</h2>\n          <p>Change homepage hero titles and descriptions.</p>\n        </a>\n        <a href=\"/admin/pricing\" className=\"block border rounded-lg p-6 shadow-sm bg-white hover:bg-gray-50\">\n          <h2 className=\"text-xl font-semibold mb-2\">Change Pricing</h2>\n          <p>Update pricing for all products and solutions.</p>\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1073},"client/src/pages/admin-hero.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQueryClient } from '@tanstack/react-query';\nimport { invalidateSiteQueries } from '@/lib/siteQueries';\n\nexport default function EditHeroSection() {\n  const { toast } = useToast();\n  const [hero, setHero] = useState({ title: '', subtitle: '' });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch('/api/hero').then(res => res.json()).then(setHero);\n  }, []);\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setHero(h => ({ ...h, [name]: value }));\n  };\n\n  const queryClient = useQueryClient();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const res = await fetch('/api/hero', {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(hero),\n    });\n    if (res.ok) {\n  toast({ title: 'Hero section updated!', variant: 'default' });\n      // invalidate so homepage refetches\n      invalidateSiteQueries(queryClient);\n    } else {\n      toast({ title: 'Error', description: 'Failed to update hero section', variant: 'destructive' });\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <AdminSidebar />\n      <div className=\"flex-1 max-w-2xl mx-auto py-12 px-4\">\n        <h1 className=\"text-2xl font-bold mb-6\">Edit Hero Section</h1>\n        <form className=\"space-y-4\" onSubmit={handleSubmit}>\n          <input name=\"title\" value={hero.title} onChange={handleInput} placeholder=\"Hero Title\" className=\"border p-2 rounded w-full\" required />\n          <textarea name=\"subtitle\" value={hero.subtitle} onChange={handleInput} placeholder=\"Hero Subtitle\" className=\"border p-2 rounded w-full\" required />\n          <button type=\"submit\" className=\"bg-primary text-white px-4 py-2 rounded\" disabled={loading}>\n            Save\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2117},"client/src/pages/admin-pricing.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQueryClient } from '@tanstack/react-query';\nimport { invalidateSiteQueries } from '@/lib/siteQueries';\n\ninterface PricingItem {\n  id: string;\n  name: string;\n  price: number;\n}\n\nexport default function EditPricing() {\n  const { toast } = useToast();\n  const [pricing, setPricing] = useState<PricingItem[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch('/api/pricing').then(res => res.json()).then(setPricing);\n  }, []);\n\n  const handlePriceChange = (id: string, value: string) => {\n    setPricing(pricing => pricing.map(item => item.id === id ? { ...item, price: Number(value) } : item));\n  };\n\n  const queryClient = useQueryClient();\n\n  const handleSave = async (id: string) => {\n    setLoading(true);\n    const item = pricing.find(p => p.id === id);\n    if (!item) return;\n    const res = await fetch(`/api/pricing/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ price: item.price }),\n    });\n    if (res.ok) {\n      toast({ title: 'Pricing updated!', variant: 'default' });\n      // Invalidate queries so frontend reloads\n      invalidateSiteQueries(queryClient);\n    } else {\n      toast({ title: 'Error', description: 'Failed to update pricing', variant: 'destructive' });\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <AdminSidebar />\n      <div className=\"flex-1 max-w-2xl mx-auto py-12 px-4\">\n        <h1 className=\"text-2xl font-bold mb-6\">Edit Pricing</h1>\n        <div className=\"space-y-4\">\n          {pricing.map(item => (\n            <div key={item.id} className=\"flex items-center gap-4 border rounded p-4\">\n              <div className=\"flex-1 font-semibold\">{item.name}</div>\n              <input\n                type=\"number\"\n                value={item.price}\n                onChange={e => handlePriceChange(item.id, e.target.value)}\n                className=\"border p-2 rounded w-32\"\n              />\n              <button\n                className=\"bg-primary text-white px-4 py-2 rounded\"\n                onClick={() => handleSave(item.id)}\n                disabled={loading}\n              >\n                Save\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2461},"client/src/pages/admin-products.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQueryClient } from '@tanstack/react-query';\nimport { invalidateSiteQueries } from '@/lib/siteQueries';\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  tag?: string | null;\n  status: 'published' | 'upcoming';\n  thumbnail?: string;\n  features?: string[];\n}\n\nexport default function ManageProducts() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [products, setProducts] = useState<Product[]>([]);\n  const [form, setForm] = useState<Partial<Product> & { file?: File | null }>({\n    status: 'published',\n    features: []\n  });\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const fetchProducts = async () => {\n    const res = await fetch('/api/products');\n    setProducts(await res.json());\n  };\n\n  useEffect(() => { fetchProducts(); }, []);\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value, files } = e.target as any;\n    if (name === 'file') {\n      setForm(f => ({ ...f, file: files[0] }));\n    } else {\n      setForm(f => ({ ...f, [name]: value }));\n    }\n  };\n\n  const addFeature = () => {\n    setForm(f => ({ ...f, features: [...(f.features || []), ''] }));\n  };\n\n  const removeFeature = (index: number) => {\n    setForm(f => ({ \n      ...f, \n      features: (f.features || []).filter((_, i) => i !== index) \n    }));\n  };\n\n  const updateFeature = (index: number, value: string) => {\n    setForm(f => ({ \n      ...f, \n      features: (f.features || []).map((feature, i) => i === index ? value : feature) \n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('name', (form as any).name || '');\n    formData.append('description', (form as any).description || '');\n    formData.append('price', String((form as any).price || ''));\n    if ((form as any).tag) formData.append('tag', (form as any).tag);\n    formData.append('status', (form as any).status || 'published');\n    if (form.features && form.features.length > 0) {\n      formData.append('features', JSON.stringify(form.features.filter(f => f.trim() !== '')));\n    }\n    if (form.file) formData.append('thumbnail', form.file as any);\n    const method = editingId ? 'PUT' : 'POST';\n    const url = editingId ? `/api/products/${editingId}` : '/api/products';\n    const res = await fetch(url, { \n      method, \n      body: formData,\n      headers: {\n        'Authorization': 'Bearer admin-token'\n      }\n    });\n    if (res.ok) {\n      toast({ title: editingId ? 'Product updated!' : 'Product added!', variant: 'default' });\n      invalidateSiteQueries(queryClient);\n      setForm({ status: 'published', features: [] });\n      setEditingId(null);\n      fetchProducts();\n    } else {\n      toast({ title: 'Error', description: 'Failed to save product', variant: 'destructive' });\n    }\n    setLoading(false);\n  };\n\n  const handleEdit = (product: Product) => {\n    setForm({ ...product, file: null });\n    setEditingId(product.id);\n  };\n\n  const handleDelete = async (id: string) => {\n    const res = await fetch(`/api/products/${id}`, { \n      method: 'DELETE',\n      headers: {\n        'Authorization': 'Bearer admin-token'\n      }\n    });\n    if (res.ok) {\n      toast({ title: 'Product deleted!', variant: 'default' });\n      invalidateSiteQueries(queryClient);\n      fetchProducts();\n    } else {\n      toast({ title: 'Error', description: 'Failed to delete product', variant: 'destructive' });\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen\">\n      <AdminSidebar />\n      <div className=\"flex-1 max-w-3xl mx-auto py-12 px-4\">\n        <h1 className=\"text-2xl font-bold mb-6\">Manage Products</h1>\n        <form className=\"mb-8 space-y-4\" onSubmit={handleSubmit}>\n          <input \n            data-testid=\"input-product-name\"\n            name=\"name\" \n            value={(form as any).name || ''} \n            onChange={handleInput} \n            placeholder=\"Product Name\" \n            className=\"border p-2 rounded w-full\" \n            required \n          />\n          <textarea \n            data-testid=\"input-product-description\"\n            name=\"description\" \n            value={(form as any).description || ''} \n            onChange={handleInput} \n            placeholder=\"Description\" \n            className=\"border p-2 rounded w-full\" \n            rows={3}\n            required \n          />\n          <input \n            data-testid=\"input-product-price\"\n            name=\"price\" \n            type=\"text\" \n            value={(form as any).price || ''} \n            onChange={handleInput} \n            placeholder=\"Price (e.g., $299, Free, Contact Us)\" \n            className=\"border p-2 rounded w-full\" \n            required \n          />\n          <input \n            data-testid=\"input-product-tag\"\n            name=\"tag\" \n            value={(form as any).tag || ''} \n            onChange={handleInput} \n            placeholder=\"Tag (optional, e.g., Most Popular, New)\" \n            className=\"border p-2 rounded w-full\" \n          />\n          <select \n            data-testid=\"select-product-status\"\n            name=\"status\" \n            value={(form as any).status || 'published'} \n            onChange={handleInput} \n            className=\"border p-2 rounded w-full\"\n            required\n          >\n            <option value=\"published\">Published</option>\n            <option value=\"upcoming\">Upcoming</option>\n          </select>\n          <input \n            data-testid=\"input-product-thumbnail\"\n            name=\"file\" \n            type=\"file\" \n            accept=\"image/*\" \n            onChange={handleInput} \n            className=\"w-full\" \n          />\n          {form.file && (\n            <div className=\"text-sm text-green-600\">Selected: {form.file.name}</div>\n          )}\n          {editingId && (form as any).thumbnail && (\n            <div className=\"text-sm text-gray-500\">\n              Current thumbnail: <img src={(form as any).thumbnail} alt=\"Current\" className=\"inline w-8 h-8 object-cover rounded ml-1\" />\n            </div>\n          )}\n          \n          {/* Features Section */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Feature Lines (appears below description)\n            </label>\n            {(form.features || []).map((feature, index) => (\n              <div key={index} className=\"flex gap-2\">\n                <input\n                  data-testid={`input-feature-${index}`}\n                  type=\"text\"\n                  value={feature}\n                  onChange={(e) => updateFeature(index, e.target.value)}\n                  placeholder={`Feature ${index + 1}`}\n                  className=\"border p-2 rounded flex-1\"\n                />\n                <button\n                  data-testid={`button-remove-feature-${index}`}\n                  type=\"button\"\n                  onClick={() => removeFeature(index)}\n                  className=\"px-3 py-2 text-red-600 hover:bg-red-50 rounded border border-red-200\"\n                >\n                  ×\n                </button>\n              </div>\n            ))}\n            <button\n              data-testid=\"button-add-feature\"\n              type=\"button\"\n              onClick={addFeature}\n              className=\"text-blue-600 hover:underline text-sm\"\n            >\n              + Add Feature Line\n            </button>\n          </div>\n          <button \n            data-testid=\"button-save-product\"\n            type=\"submit\" \n            className=\"bg-primary text-white px-4 py-2 rounded hover:bg-primary/90 disabled:opacity-50\" \n            disabled={loading}\n          >\n            {loading ? 'Saving...' : (editingId ? 'Update Product' : 'Add Product')}\n          </button>\n          {editingId && (\n            <button \n              data-testid=\"button-cancel-edit\"\n              type=\"button\" \n              className=\"ml-2 text-sm underline\" \n              onClick={() => { setEditingId(null); setForm({ status: 'published', features: [] }); }}\n            >\n              Cancel\n            </button>\n          )}\n        </form>\n        <div className=\"grid gap-6\">\n          {products.map(product => (\n            <div \n              key={product.id} \n              data-testid={`product-card-${product.id}`}\n              className=\"border rounded-lg p-4 flex items-center gap-4\"\n            >\n              {product.thumbnail && (\n                <img \n                  src={product.thumbnail} \n                  alt={product.name} \n                  className=\"w-20 h-20 object-cover rounded\" \n                />\n              )}\n              <div className=\"flex-1\">\n                <div className=\"font-bold\" data-testid={`product-name-${product.id}`}>\n                  {product.name}\n                  {product.tag && (\n                    <span className=\"ml-2 px-2 py-1 text-xs bg-cyan-100 text-cyan-800 rounded\">\n                      {product.tag}\n                    </span>\n                  )}\n                </div>\n                <div className=\"text-sm text-muted-foreground\" data-testid={`product-description-${product.id}`}>\n                  {product.description}\n                </div>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <span className=\"text-primary font-semibold\" data-testid={`product-price-${product.id}`}>\n                    {product.price}\n                  </span>\n                  <span className={`text-xs px-2 py-1 rounded ${\n                    product.status === 'published' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n                  }`}>\n                    {product.status}\n                  </span>\n                </div>\n              </div>\n              <button \n                data-testid={`button-edit-${product.id}`}\n                className=\"text-blue-600 hover:underline mr-2\" \n                onClick={() => handleEdit(product)}\n              >\n                Edit\n              </button>\n              <button \n                data-testid={`button-delete-${product.id}`}\n                className=\"text-red-600 hover:underline\" \n                onClick={() => handleDelete(product.id)}\n              >\n                Delete\n              </button>\n            </div>\n          ))}\n          {products.length === 0 && (\n            <div className=\"text-center text-gray-500 py-8\">\n              No products yet. Add your first product above!\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10845},"client/src/pages/ai-solutions.tsx":{"content":"import React from \"react\";\n\nconst aiSolutions = [\n  {\n    name: \"AI Chatbot\",\n    description: \"24/7 customer support and lead generation with advanced AI.\",\n    price: \"$49/mo\",\n  },\n  {\n    name: \"AI Analytics\",\n    description: \"Business insights and analytics powered by AI.\",\n    price: \"$99/mo\",\n  },\n  {\n    name: \"AI Content Generator\",\n    description: \"Automate blog, ad, and social content creation.\",\n    price: \"$29/mo\",\n  },\n];\n\nexport default function AISolutionsPage() {\n  return (\n    <div className=\"max-w-3xl mx-auto py-12 px-4\">\n      <h1 className=\"text-3xl font-bold mb-6\">AI Solutions & Pricing</h1>\n      <div className=\"space-y-6\">\n        {aiSolutions.map((sol) => (\n          <div key={sol.name} className=\"border rounded-lg p-6 shadow-sm bg-white\">\n            <h2 className=\"text-xl font-semibold mb-2\">{sol.name}</h2>\n            <p className=\"mb-2\">{sol.description}</p>\n            <div className=\"text-lg font-bold text-blue-600\">{sol.price}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1041},"client/src/pages/chatbot-product.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { ArrowLeft, Database, Image, ShoppingCart } from 'lucide-react';\nimport { ChatDemo } from '@/components/chat-demo';\nimport { DemoModal } from '@/components/demo-modal';\nimport { FaWhatsapp, FaFacebookMessenger } from 'react-icons/fa';\nimport { Globe } from 'lucide-react';\n\nexport default function ChatbotProduct() {\n  const [showDemoModal, setShowDemoModal] = useState(false);\n\n  return (\n    <div className=\"min-h-screen\">\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <Link href=\"/products\">\n              <span className=\"inline-flex items-center gap-2 text-primary hover:text-primary/80 mb-6\" data-testid=\"link-back-home\"><ArrowLeft className=\"h-4 w-4\" /> Back to Products</span>\n            </Link>\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6\" data-testid=\"text-product-title\">\n              AI Business Chatbot\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-product-subtitle\">\n              Transform customer interactions with our intelligent chatbot that understands your business, manages inventory, and processes orders seamlessly across multiple platforms.\n            </p>\n          </div>\n\n          {/* Live Demo Section */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-6 text-center\" data-testid=\"text-demo-title\">Try Our Live Demo</h3>\n            <ChatDemo />\n          </Card>\n\n          {/* Integration Platforms */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-integration-title\">Multi-Platform Integration</h3>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\" data-testid=\"card-whatsapp\">\n                <FaWhatsapp className=\"text-4xl text-green-500 mb-4 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">WhatsApp Business</h4>\n                <p className=\"text-sm text-muted-foreground\">Seamless integration with WhatsApp for customer support</p>\n              </div>\n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\" data-testid=\"card-messenger\">\n                <FaFacebookMessenger className=\"text-4xl text-blue-500 mb-4 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">Facebook Messenger</h4>\n                <p className=\"text-sm text-muted-foreground\">Connect with customers through Messenger platform</p>\n              </div>\n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\" data-testid=\"card-website\">\n                <Globe className=\"h-10 w-10 text-primary mb-4 mx-auto\" />\n                <h4 className=\"font-semibold mb-2\">Website Widget</h4>\n                <p className=\"text-sm text-muted-foreground\">Embed directly on your website for instant support</p>\n              </div>\n            </div>\n          </Card>\n\n          {/* AI Agent in Action Section */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-ai-action-title\">See AI Agent in Action</h3>\n            \n            {/* Text Responses */}\n            <div className=\"grid md:grid-cols-2 gap-12 mb-16\">\n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6\">Smart Text Responses</h4>\n                <div className=\"relative mx-auto w-64 h-[500px] bg-gradient-to-br from-gray-900 to-gray-700 rounded-[2.5rem] p-2 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-[2rem] relative overflow-hidden\">\n                    {/* iPhone Status Bar */}\n                    <div className=\"bg-black text-white text-xs py-1 px-4 flex justify-between items-center\">\n                      <span>9:41</span>\n                      <div className=\"w-4 h-4 bg-white rounded-full\"></div>\n                      <span>100%</span>\n                    </div>\n                    \n                    {/* Chat Interface */}\n                    <div className=\"p-4 h-full bg-gradient-to-b from-blue-50 to-white\">\n                      <div className=\"text-center mb-4\">\n                        <h5 className=\"font-semibold text-lg\">TechStore Support</h5>\n                        <p className=\"text-xs text-gray-500\">Online now</p>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-3 max-w-[80%] text-sm\">\n                            Do you have iPhone 15 in stock?\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-gray-200 text-gray-800 rounded-lg p-3 max-w-[80%] text-sm\">\n                            Yes! We have 12 iPhone 15 units in stock. Available colors: Blue, Pink, Yellow, Green, Black. Price: $799. Would you like to place an order?\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-3 max-w-[80%] text-sm\">\n                            Yes, I want the blue one\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-gray-200 text-gray-800 rounded-lg p-3 max-w-[80%] text-sm\">\n                            Perfect! I can help you order the iPhone 15 in Blue. Please provide your name and delivery address.\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  Instant responses with real inventory data and order processing\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6\">Image Analysis</h4>\n                <div className=\"relative mx-auto w-64 h-[500px] bg-gradient-to-br from-gray-900 to-gray-700 rounded-[2.5rem] p-2 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-[2rem] relative overflow-hidden\">\n                    {/* iPhone Status Bar */}\n                    <div className=\"bg-black text-white text-xs py-1 px-4 flex justify-between items-center\">\n                      <span>9:41</span>\n                      <div className=\"w-4 h-4 bg-white rounded-full\"></div>\n                      <span>100%</span>\n                    </div>\n                    \n                    {/* Chat Interface */}\n                    <div className=\"p-4 h-full bg-gradient-to-b from-blue-50 to-white\">\n                      <div className=\"text-center mb-4\">\n                        <h5 className=\"font-semibold text-lg\">TechStore Support</h5>\n                        <p className=\"text-xs text-gray-500\">Online now</p>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-2 max-w-[80%]\">\n                            <img \n                              src=\"https://images.unsplash.com/photo-1592899677977-9c10ca588bbd?w=150&h=100&fit=crop\" \n                              alt=\"Laptop image\" \n                              className=\"rounded w-full h-20 object-cover mb-2\"\n                            />\n                            <p className=\"text-sm\">What laptop is this?</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-gray-200 text-gray-800 rounded-lg p-3 max-w-[80%] text-sm\">\n                            I can see this is a MacBook Pro. Based on the image, it appears to be a 14\" or 16\" model. We have similar MacBook Pro models in stock starting at $1,999. Would you like details on our current inventory?\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-end\">\n                          <div className=\"bg-blue-500 text-white rounded-lg p-3 max-w-[80%] text-sm\">\n                            Yes, show me the 14\" models\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  AI analyzes images and provides accurate product information\n                </p>\n              </div>\n            </div>\n            \n            {/* WhatsApp and Messenger Integration */}\n            <div className=\"grid md:grid-cols-2 gap-12\">\n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6 flex items-center justify-center gap-2\">\n                  <FaWhatsapp className=\"text-green-500\" />\n                  WhatsApp Integration\n                </h4>\n                <div className=\"relative mx-auto w-80 h-[400px] bg-gradient-to-br from-gray-200 to-gray-400 rounded-2xl p-4 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-xl relative overflow-hidden\">\n                    {/* Computer Screen Mockup */}\n                    <div className=\"bg-green-600 text-white p-3 text-center\">\n                      <h5 className=\"font-semibold\">WhatsApp Business Dashboard</h5>\n                    </div>\n                    \n                    <div className=\"p-4 space-y-4\">\n                      <div className=\"bg-green-50 border-l-4 border-green-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-green-800\">Customer: +1 555-0123</p>\n                        <p className=\"text-sm text-gray-700\">\"Hi, do you deliver to Brooklyn?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"Yes! We deliver to Brooklyn. Delivery is free for orders over $50 and typically takes 2-3 business days. Would you like to place an order?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-green-50 border-l-4 border-green-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-green-800\">Customer: +1 555-0123</p>\n                        <p className=\"text-sm text-gray-700\">\"Perfect! I need a wireless mouse\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"Great choice! We have several wireless mice in stock: Logitech MX Master 3 ($99), Apple Magic Mouse ($79), Microsoft Surface Mouse ($59). Which one interests you?\"</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  Seamless WhatsApp integration with automated customer support\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <h4 className=\"text-xl font-semibold mb-6 flex items-center justify-center gap-2\">\n                  <FaFacebookMessenger className=\"text-blue-500\" />\n                  Messenger Integration\n                </h4>\n                <div className=\"relative mx-auto w-80 h-[400px] bg-gradient-to-br from-gray-200 to-gray-400 rounded-2xl p-4 shadow-2xl\">\n                  <div className=\"w-full h-full bg-white rounded-xl relative overflow-hidden\">\n                    {/* Computer Screen Mockup */}\n                    <div className=\"bg-blue-600 text-white p-3 text-center\">\n                      <h5 className=\"font-semibold\">Facebook Business Dashboard</h5>\n                    </div>\n                    \n                    <div className=\"p-4 space-y-4\">\n                      <div className=\"bg-purple-50 border-l-4 border-purple-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-purple-800\">Sarah Johnson</p>\n                        <p className=\"text-sm text-gray-700\">\"What are your business hours?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"We're open Monday-Friday 9AM-6PM EST, and Saturday 10AM-4PM EST. We're closed on Sundays. Our online store is available 24/7 for orders!\"</p>\n                      </div>\n                      \n                      <div className=\"bg-purple-50 border-l-4 border-purple-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-purple-800\">Sarah Johnson</p>\n                        <p className=\"text-sm text-gray-700\">\"Do you have any deals on headphones?\"</p>\n                      </div>\n                      \n                      <div className=\"bg-blue-50 border-l-4 border-blue-500 p-3 rounded\">\n                        <p className=\"text-sm font-semibold text-blue-800\">AI Agent Response:</p>\n                        <p className=\"text-sm text-gray-700\">\"Yes! We currently have 20% off all Sony headphones and 15% off Bose models. The Sony WH-1000XM5 is now $279 (down from $349). Would you like to hear about more deals?\"</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-4\">\n                  Facebook Messenger integration with intelligent conversation flow\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            <Card className=\"p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-feature-realtime\">\n              <Database className=\"h-8 w-8 text-primary mb-4\" />\n              <h4 className=\"font-semibold mb-3\">Real-time Data Integration</h4>\n              <p className=\"text-sm text-muted-foreground\">Connects to your database for live inventory updates and customer information</p>\n            </Card>\n            \n            <Card className=\"p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-feature-image\">\n              <Image className=\"h-8 w-8 text-primary mb-4\" />\n              <h4 className=\"font-semibold mb-3\">Image Processing</h4>\n              <p className=\"text-sm text-muted-foreground\">Analyzes product images and provides detailed information and recommendations</p>\n            </Card>\n            \n            <Card className=\"p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-feature-orders\">\n              <ShoppingCart className=\"h-8 w-8 text-primary mb-4\" />\n              <h4 className=\"font-semibold mb-3\">Order Management</h4>\n              <p className=\"text-sm text-muted-foreground\">Processes orders directly and updates your Excel sheets automatically</p>\n            </Card>\n          </div>\n\n          {/* Pricing */}\n          <Card className=\"p-8 shadow-lg text-center\">\n            <h3 className=\"text-2xl font-bold mb-6\" data-testid=\"text-pricing-title\">Choose Your Plan</h3>\n            <div className=\"inline-block bg-gradient-to-r from-primary to-accent text-white rounded-2xl p-8\">\n              <h4 className=\"text-xl font-bold mb-2\">Professional Plan</h4>\n              <div className=\"text-4xl font-bold mb-4\" data-testid=\"text-pricing-amount\">\n                $299\n                <span className=\"text-lg font-normal\">/month</span>\n              </div>\n              <Button \n                onClick={() => setShowDemoModal(true)}\n                className=\"bg-white text-primary px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n                data-testid=\"button-get-started\"\n              >\n                Book Demo & Get Started\n              </Button>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      <DemoModal open={showDemoModal} onOpenChange={setShowDemoModal} />\n    </div>\n  );\n}\n","size_bytes":17395},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useHeroQuery, useProductsQuery } from '@/lib/siteQueries';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useLanguage } from '@/components/language-provider';\nimport { DemoModal } from '@/components/demo-modal';\nimport { MessageCircle, UserCheck, Check } from 'lucide-react';\n\n// Custom hook for scroll animations\nfunction useScrollAnimation() {\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      if (ref.current) {\n        observer.unobserve(ref.current);\n      }\n    };\n  }, []);\n\n  return [ref, isVisible] as const;\n}\n\nexport default function Home() {\n  const { t } = useLanguage();\n  const [showDemoModal, setShowDemoModal] = useState(false);\n  const { data: heroData } = useHeroQuery();\n  const { data: products, isLoading: productsLoading } = useProductsQuery({ status: 'published' });\n  \n  // Scroll animation refs\n  const [productsRef, productsVisible] = useScrollAnimation();\n  const [whyChooseRef, whyChooseVisible] = useScrollAnimation();\n  const [reviewsRef, reviewsVisible] = useScrollAnimation();\n  const [faqRef, faqVisible] = useScrollAnimation();\n  const [contactRef, contactVisible] = useScrollAnimation();\n\n  const scrollToProducts = () => {\n    document.getElementById('products')?.scrollIntoView({ \n      behavior: 'smooth' \n    });\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section id=\"home\" className=\"relative overflow-hidden bg-gradient-to-br from-background to-secondary py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center animate-fade-in\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              {heroData?.title ?? 'Transform Your Business with'}\n              <span className=\"gradient-text block mt-2\">{heroData?.title ? '' : 'AI Solutions'}</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\" data-testid=\"text-hero-subtitle\">\n              {heroData?.subtitle ?? t.hero.subtitle}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-16\">\n              <Link href=\"/products\">\n                <Button \n                  className=\"bg-primary text-primary-foreground px-8 py-3 hover:bg-primary/90 transition-all hover:scale-105\"\n                  data-testid=\"button-explore-products\"\n                >\n                  {t.hero.exploreProducts}\n                </Button>\n              </Link>\n              <Button \n                variant=\"outline\"\n                onClick={() => setShowDemoModal(true)}\n                className=\"px-8 py-3 hover:bg-secondary transition-colors\"\n                data-testid=\"button-book-demo\"\n              >\n                {t.hero.bookDemo}\n              </Button>\n            </div>\n            \n            {/* Powered By Section */}\n            <div className=\"relative mt-16\">\n              <p className=\"text-center text-muted-foreground mb-8 text-lg font-medium\">Powered by Leading AI Technologies</p>\n              <div className=\"overflow-hidden\">\n                <div className=\"flex animate-scroll space-x-12\">\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">GPT</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">ChatGPT-5</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">NB</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Nano Banana</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">N8N</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">N8N</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">G</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Gemini Pro</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-red-400 to-pink-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">V3</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">VEO3</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">C</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Claude Sonnet</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-teal-400 to-green-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">L</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">LLaMA 3</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-orange-400 to-red-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">D</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">DALL-E 3</span>\n                  </div>\n                  \n                  {/* Duplicate the logos for seamless loop */}\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">GPT</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">ChatGPT-5</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">NB</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Nano Banana</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">N8N</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">N8N</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-sm whitespace-nowrap\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-xs\">G</span>\n                    </div>\n                    <span className=\"font-semibold text-gray-800\">Gemini Pro</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Floating Animation Elements */}\n          <div className=\"absolute top-20 left-10 w-20 h-20 bg-primary/10 rounded-full animate-pulse-slow\"></div>\n          <div className=\"absolute top-40 right-20 w-16 h-16 bg-accent/10 rounded-full animate-pulse-slow\" style={{animationDelay: '1s'}}></div>\n          <div className=\"absolute bottom-20 left-1/4 w-12 h-12 bg-primary/10 rounded-full animate-pulse-slow\" style={{animationDelay: '2s'}}></div>\n        </div>\n      </section>\n\n      {/* Products Grid Section */}\n      <section id=\"products\" className=\"py-20\">\n        <div \n          ref={productsRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            productsVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16 animate-fade-in\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-products-title\">\n              {t.products.title}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-products-subtitle\">\n              {t.products.subtitle}\n            </p>\n          </div>\n          \n          {productsLoading ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-gray-300 h-48 rounded-lg mb-4\"></div>\n                  <div className=\"bg-gray-300 h-6 rounded mb-2\"></div>\n                  <div className=\"bg-gray-300 h-4 rounded mb-4\"></div>\n                  <div className=\"bg-gray-300 h-10 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : products && products.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n              {products.map((product: any) => {\n                // Helper function to get product link based on name\n                const getProductLink = (name: string): string => {\n                  const nameKey = name.toLowerCase();\n                  if (nameKey.includes('chatbot')) return '/chatbot-product';\n                  if (nameKey.includes('recruiting') || nameKey.includes('recruiter')) return '/recruiting-product';\n                  return '/products'; // Default fallback\n                };\n\n                const productLink = getProductLink(product.name);\n                \n                return (\n                  <Card \n                    key={product.id} \n                    className=\"p-8 hover:shadow-xl transition-all duration-300 feature-card cursor-pointer\" \n                    data-testid={`card-product-${product.id}`}\n                  >\n                    <Link href={productLink}>\n                      <div className=\"block\">\n                        {product.thumbnail ? (\n                          <img \n                            src={product.thumbnail} \n                            alt={product.name} \n                            className=\"w-full h-48 object-cover rounded-lg mb-6\"\n                            onError={(e) => {\n                              // Fallback to default image if thumbnail fails to load\n                              (e.target as HTMLImageElement).src = \"https://images.unsplash.com/photo-1519125323398-675f0ddb6308?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\";\n                            }}\n                          />\n                        ) : (\n                          <div className=\"w-full h-48 bg-gradient-to-br from-primary/10 to-accent/10 rounded-lg mb-6 flex items-center justify-center\">\n                            <MessageCircle className=\"h-12 w-12 text-primary/30\" />\n                          </div>\n                        )}\n                        \n                        <div className=\"flex items-start gap-4 mb-4\">\n                          <div className=\"bg-primary/10 p-3 rounded-lg\">\n                            <MessageCircle className=\"h-6 w-6 text-primary\" />\n                          </div>\n                          <div>\n                            <h3 className=\"text-2xl font-bold mb-2\" data-testid={`text-product-title-${product.id}`}>\n                              {product.name}\n                            </h3>\n                            <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n                              {product.tag && (\n                                <>\n                                  <Badge variant=\"outline\" className=\"bg-primary/10 text-primary border-primary/20\">\n                                    {product.tag}\n                                  </Badge>\n                                  <span>•</span>\n                                </>\n                              )}\n                              <span>Available Now</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-muted-foreground mb-6\" data-testid={`text-product-description-${product.id}`}>\n                          {product.description}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <span className=\"text-sm text-muted-foreground\">Starting at</span>\n                            <div className=\"text-2xl font-bold text-primary\" data-testid={`text-product-price-${product.id}`}>\n                              {product.price}\n                            </div>\n                          </div>\n                          <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" data-testid={`button-product-learn-more-${product.id}`}>\n                            Learn More\n                          </Button>\n                        </div>\n                      </div>\n                    </Link>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground text-lg\">\n                No products available at the moment. Please check back soon!\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Why Choose Our Solutions Section */}\n      <section id=\"why-choose\" className=\"py-20 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div \n          ref={whyChooseRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            whyChooseVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-why-choose-title\">\n              Why Choose Our AI Solutions?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              We deliver cutting-edge AI technology that transforms businesses with proven results and unmatched reliability.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"p-8 text-center hover:shadow-lg transition-shadow\" data-testid=\"card-why-proven\">\n              <div className=\"bg-primary/10 p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Check className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Proven Results</h3>\n              <p className=\"text-muted-foreground\">\n                Our solutions have helped 500+ businesses increase efficiency by 80% and reduce operational costs significantly.\n              </p>\n            </Card>\n            \n            <Card className=\"p-8 text-center hover:shadow-lg transition-shadow\" data-testid=\"card-why-support\">\n              <div className=\"bg-accent/10 p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <MessageCircle className=\"h-8 w-8 text-accent\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">24/7 Expert Support</h3>\n              <p className=\"text-muted-foreground\">\n                Dedicated support team available round-the-clock to ensure your AI solutions run smoothly and efficiently.\n              </p>\n            </Card>\n            \n            <Card className=\"p-8 text-center hover:shadow-lg transition-shadow\" data-testid=\"card-why-integration\">\n              <div className=\"bg-primary/10 p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <UserCheck className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Easy Integration</h3>\n              <p className=\"text-muted-foreground\">\n                Seamlessly integrate with your existing systems. Setup in minutes, not weeks, with our guided implementation process.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Customer Reviews Section */}\n      <section id=\"reviews\" className=\"py-20\">\n        <div \n          ref={reviewsRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            reviewsVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-reviews-title\">\n              What Our Customers Say\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Trusted by businesses worldwide. See how our AI solutions have transformed their operations.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"p-8 hover:shadow-lg transition-shadow\" data-testid=\"card-review-1\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {\"★\".repeat(5)}\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-6 italic\">\n                \"The AI chatbot reduced our customer service workload by 70%. Our team can now focus on complex issues while the bot handles routine inquiries perfectly.\"\n              </p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                  SJ\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Sarah Johnson</h4>\n                  <p className=\"text-sm text-muted-foreground\">CEO, TechStart Inc.</p>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-8 hover:shadow-lg transition-shadow\" data-testid=\"card-review-2\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {\"★\".repeat(5)}\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-6 italic\">\n                \"The recruiting system streamlined our hiring process completely. We went from screening 100 CVs manually to having the top 10 candidates selected automatically.\"\n              </p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                  MR\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Michael Rodriguez</h4>\n                  <p className=\"text-sm text-muted-foreground\">HR Director, Global Corp</p>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-8 hover:shadow-lg transition-shadow\" data-testid=\"card-review-3\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {\"★\".repeat(5)}\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-6 italic\">\n                \"Implementation was seamless and the ROI was immediate. Our order processing is now 5x faster and error-free. Best investment we've made this year.\"\n              </p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                  EL\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Emily Liu</h4>\n                  <p className=\"text-sm text-muted-foreground\">Operations Manager, RetailPlus</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section id=\"faq\" className=\"py-20 bg-secondary/30\">\n        <div \n          ref={faqRef}\n          className={`max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            faqVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-faq-title\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Get answers to the most common questions about our AI solutions.\n            </p>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <Card className=\"p-6\" data-testid=\"card-faq-1\">\n              <h3 className=\"text-lg font-semibold mb-3\">How quickly can I see results with your AI solutions?</h3>\n              <p className=\"text-muted-foreground\">\n                Most customers see immediate improvements within the first week of implementation. Full optimization typically occurs within 30 days as the AI learns your business patterns.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-2\">\n              <h3 className=\"text-lg font-semibold mb-3\">Do I need technical expertise to use these solutions?</h3>\n              <p className=\"text-muted-foreground\">\n                Not at all! Our solutions are designed for business users. We provide complete setup assistance, training, and ongoing support to ensure success without technical complexity.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-3\">\n              <h3 className=\"text-lg font-semibold mb-3\">Can the AI integrate with my existing systems?</h3>\n              <p className=\"text-muted-foreground\">\n                Yes, our AI solutions integrate seamlessly with popular platforms including Excel, Google Sheets, WhatsApp, Messenger, and most CRM systems through our robust API connections.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-4\">\n              <h3 className=\"text-lg font-semibold mb-3\">What happens to my data? Is it secure?</h3>\n              <p className=\"text-muted-foreground\">\n                Your data security is our top priority. We use enterprise-grade encryption, comply with GDPR standards, and never share your business data with third parties.\n              </p>\n            </Card>\n            \n            <Card className=\"p-6\" data-testid=\"card-faq-5\">\n              <h3 className=\"text-lg font-semibold mb-3\">Can I customize the AI to match my business needs?</h3>\n              <p className=\"text-muted-foreground\">\n                Absolutely! Our AI solutions are highly customizable. You can train the chatbot with your specific business knowledge and configure recruiting criteria to match your exact requirements.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Us Section */}\n      <section id=\"contact\" className=\"py-20 bg-gradient-to-br from-primary/10 to-accent/10\">\n        <div \n          ref={contactRef}\n          className={`max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 transition-all duration-700 ${\n            contactVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}\n        >\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"text-contact-title\">\n              Ready to Transform Your Business?\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Get started today with a personalized demo or speak with our AI specialists to find the perfect solution for your business.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n            <Card className=\"p-8\">\n              <h3 className=\"text-2xl font-bold mb-6\">Get in Touch</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\" data-testid=\"contact-email\">\n                  <div className=\"bg-primary/10 p-3 rounded-lg\">\n                    <MessageCircle className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Email Us</p>\n                    <p className=\"text-muted-foreground\">support@aisolutions.com</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4\" data-testid=\"contact-phone\">\n                  <div className=\"bg-accent/10 p-3 rounded-lg\">\n                    <Check className=\"h-5 w-5 text-accent\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Call Us</p>\n                    <p className=\"text-muted-foreground\">+1 (555) 123-4567</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4\" data-testid=\"contact-hours\">\n                  <div className=\"bg-primary/10 p-3 rounded-lg\">\n                    <UserCheck className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold\">Business Hours</p>\n                    <p className=\"text-muted-foreground\">Mon-Fri: 9AM-6PM EST</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n            \n            <Card className=\"p-8\">\n              <h3 className=\"text-2xl font-bold mb-6\">Book Your Free Demo</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                See our AI solutions in action with a personalized demonstration tailored to your business needs.\n              </p>\n              <Button \n                onClick={() => setShowDemoModal(true)}\n                className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 py-3\"\n                data-testid=\"button-book-demo-contact\"\n              >\n                Schedule Free Demo\n              </Button>\n              \n              <div className=\"mt-6 pt-6 border-t border-border\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  🚀 Join 500+ businesses already using our AI solutions\n                </p>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <DemoModal open={showDemoModal} onOpenChange={setShowDemoModal} />\n    </div>\n  );\n}\n","size_bytes":29670},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import React from \"react\";\nimport { useProductsQuery } from \"@/lib/siteQueries\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Check, MessageSquare, Users, ArrowRight } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\nimport chatbotBg from \"@/assets/chatbot-bg.png\";\nimport recruitingBg from \"@/assets/recruiting-bg.png\";\n\n// Helper function to get product link based on name\nconst getProductLink = (name: string): string => {\n  const nameKey = name.toLowerCase();\n  if (nameKey.includes('chatbot')) return '/chatbot-product';\n  if (nameKey.includes('recruiting') || nameKey.includes('recruiter')) return '/recruiting-product';\n  return '#'; // Default for upcoming products\n};\n\n// Helper function to get product background image based on name\nconst getProductBackground = (name: string): string => {\n  const nameKey = name.toLowerCase();\n  if (nameKey.includes('chatbot')) return chatbotBg;\n  if (nameKey.includes('recruiting') || nameKey.includes('recruiter')) return recruitingBg;\n  return chatbotBg; // Default\n};\n\n// Helper function to get product icon based on name\nconst getProductIcon = (name: string) => {\n  const nameKey = name.toLowerCase();\n  if (nameKey.includes('chatbot')) return MessageSquare;\n  if (nameKey.includes('recruiting') || nameKey.includes('recruiter')) return Users;\n  return MessageSquare; // Default\n};\n\nexport default function ProductGrid() {\n  const { data: products, isLoading, error } = useProductsQuery();\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-16 px-4 text-center\">\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-10\">Our Products</h1>\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-gray-300 h-40 rounded-lg mb-4\"></div>\n              <div className=\"bg-gray-300 h-6 rounded mb-2\"></div>\n              <div className=\"bg-gray-300 h-4 rounded mb-4\"></div>\n              <div className=\"bg-gray-300 h-10 rounded\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-16 px-4 text-center\">\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-10\">Our Products</h1>\n        <p className=\"text-red-600\">Failed to load products. Please try again later.</p>\n      </div>\n    );\n  }\n\n  if (!products || products.length === 0) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-16 px-4 text-center\">\n        <h1 className=\"text-3xl md:text-4xl font-bold mb-10\">Our Products</h1>\n        <p className=\"text-muted-foreground\">No products available at the moment.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-16 px-4\">\n      <h1 className=\"text-3xl md:text-4xl font-bold mb-10 text-center\">Our Products</h1>\n      <div className=\"grid md:grid-cols-2 gap-8\">\n        {products.map((product: Product) => {\n          const isUpcoming = product.status === 'upcoming';\n          const productLink = getProductLink(product.name);\n          const backgroundImage = product.thumbnail || getProductBackground(product.name);\n          const IconComponent = getProductIcon(product.name);\n          \n          return (\n            <Card\n              key={product.id}\n              className=\"bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden border border-gray-200\"\n              data-testid={`product-card-${product.id}`}\n            >\n              {/* Header Image */}\n              <div className=\"h-48 w-full overflow-hidden\">\n                <img\n                  src={backgroundImage}\n                  alt={product.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              \n              {/* Card Content */}\n              <div className=\"p-6\">\n                {/* Title with Icon */}\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"w-8 h-8 bg-cyan-500 rounded-full flex items-center justify-center mr-3 flex-shrink-0\">\n                    <IconComponent className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <h2 className=\"text-xl font-bold text-gray-900\" data-testid={`product-name-${product.id}`}>\n                    {product.name}\n                  </h2>\n                </div>\n                \n                {/* Tags */}\n                <div className=\"flex items-center gap-2 mb-4\">\n                  {product.tag && (\n                    <Badge className=\"bg-cyan-100 text-cyan-700 border-0 text-xs px-2 py-1 font-medium\">\n                      {product.tag}\n                    </Badge>\n                  )}\n                  <Badge className=\"bg-gray-100 text-gray-600 border-0 text-xs px-2 py-1 font-medium\">\n                    {isUpcoming ? 'Coming Soon' : 'Real-time Integration'}\n                  </Badge>\n                </div>\n                \n                {/* Description */}\n                <p className=\"text-gray-600 text-sm mb-4 leading-relaxed\" data-testid={`product-description-${product.id}`}>\n                  {product.description}\n                </p>\n                \n                {/* Features List */}\n                {product.features && product.features.length > 0 && (\n                  <ul className=\"space-y-2 mb-6\">\n                    {product.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-start text-sm text-gray-700\">\n                        <Check className=\"w-4 h-4 text-green-500 mr-3 mt-0.5 flex-shrink-0\" />\n                        <span>{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n                \n                {/* Footer */}\n                <div className=\"flex items-center justify-between pt-4\">\n                  {/* Pricing */}\n                  <div>\n                    <div className=\"text-sm text-gray-600\" data-testid={`product-price-${product.id}`}>\n                      Starting at <span className=\"text-2xl font-bold text-cyan-500\">{product.price}</span><span className=\"text-sm text-gray-500\">/month</span>\n                    </div>\n                  </div>\n                  \n                  {/* CTA Button */}\n                  <div>\n                    {isUpcoming ? (\n                      <Button \n                        disabled \n                        className=\"bg-gray-300 text-gray-600 cursor-not-allowed px-6 py-2\"\n                      >\n                        Coming Soon\n                      </Button>\n                    ) : (\n                      <Link href={productLink}>\n                        <Button className=\"bg-cyan-500 hover:bg-cyan-600 text-white px-6 py-2 rounded-md font-medium flex items-center gap-2\">\n                          Learn More\n                          <ArrowRight className=\"w-4 h-4\" />\n                        </Button>\n                      </Link>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7314},"client/src/pages/recruiting-product.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { ArrowLeft, Mail, Search, Brain, Star, CheckCircle, Clock, Scale, TrendingUp, Table, Languages, Shield } from 'lucide-react';\nimport { DemoModal } from '@/components/demo-modal';\n\nexport default function RecruitingProduct() {\n  const [showDemoModal, setShowDemoModal] = useState(false);\n\n  const workflowSteps = [\n    {\n      icon: Mail,\n      title: \"1. CV Collection\",\n      description: \"Automatically collect CVs from emails and Google Sheets\",\n    },\n    {\n      icon: Search,\n      title: \"2. Data Parsing\",\n      description: \"Extract and structure key information from CV documents\",\n    },\n    {\n      icon: Brain,\n      title: \"3. AI Analysis\", \n      description: \"Match keywords and requirements using advanced algorithms\",\n    },\n    {\n      icon: Star,\n      title: \"4. Scoring & Rating\",\n      description: \"Generate qualification scores based on job requirements\",\n    },\n    {\n      icon: CheckCircle,\n      title: \"5. Qualified Selection\",\n      description: \"Automatically filter and organize qualified candidates\",\n    },\n  ];\n\n  const features = [\n    {\n      icon: Clock,\n      title: \"Save 80% Time\",\n      description: \"Reduce manual screening from hours to minutes\",\n    },\n    {\n      icon: Scale,\n      title: \"Reduce Bias\",\n      description: \"Objective, data-driven candidate evaluation\",\n    },\n    {\n      icon: TrendingUp,\n      title: \"Higher Quality\",\n      description: \"Find better matches with AI-powered analysis\",\n    },\n    {\n      icon: Table,\n      title: \"Excel Integration\",\n      description: \"Seamless integration with existing workflows\",\n    },\n    {\n      icon: Languages,\n      title: \"Multi-Language\",\n      description: \"Support for multiple languages and formats\",\n    },\n    {\n      icon: Shield,\n      title: \"Secure & Compliant\",\n      description: \"GDPR compliant data processing\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      <section className=\"py-20 bg-gradient-to-br from-accent/5 to-primary/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <Link href=\"/products\">\n              <span className=\"inline-flex items-center gap-2 text-accent hover:text-accent/80 mb-6\" data-testid=\"link-back-home\"><ArrowLeft className=\"h-4 w-4\" /> Back to Products</span>\n            </Link>\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6\" data-testid=\"text-product-title\">\n              Automated Recruiting System\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-product-subtitle\">\n              Revolutionize your hiring process with AI-powered CV screening that saves time, reduces bias, and identifies the best candidates automatically.\n            </p>\n          </div>\n\n          {/* Workflow Demo */}\n          <Card className=\"p-8 mb-12 shadow-lg\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-workflow-title\">See How It Works</h3>\n            <div className=\"max-w-4xl mx-auto\">\n              {workflowSteps.map((step, index) => (\n                <div\n                  key={index}\n                  className=\"workflow-step\"\n                  data-testid={`workflow-step-${index}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"bg-accent/10 p-3 rounded-full\">\n                      <step.icon className=\"h-6 w-6 text-accent\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-lg mb-2\">{step.title}</h4>\n                      <p className=\"text-muted-foreground\">{step.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            {features.map((feature, index) => (\n              <Card \n                key={index}\n                className=\"p-6 hover:shadow-lg transition-shadow\"\n                data-testid={`card-feature-${index}`}\n              >\n                <feature.icon className=\"h-8 w-8 text-accent mb-4\" />\n                <h4 className=\"font-semibold mb-3\">{feature.title}</h4>\n                <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n              </Card>\n            ))}\n          </div>\n\n          {/* ROI Benefits */}\n          <Card className=\"p-8 mb-12 shadow-lg bg-gradient-to-r from-accent/5 to-primary/5\">\n            <h3 className=\"text-2xl font-bold mb-8 text-center\" data-testid=\"text-benefits-title\">Measurable Results</h3>\n            <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n              <div data-testid=\"stat-time-saved\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">80%</div>\n                <p className=\"text-muted-foreground\">Time Saved on Screening</p>\n              </div>\n              <div data-testid=\"stat-accuracy\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">95%</div>\n                <p className=\"text-muted-foreground\">Screening Accuracy</p>\n              </div>\n              <div data-testid=\"stat-cost-reduction\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">60%</div>\n                <p className=\"text-muted-foreground\">Cost Reduction</p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Pricing */}\n          <Card className=\"p-8 shadow-lg text-center\">\n            <h3 className=\"text-2xl font-bold mb-6\" data-testid=\"text-pricing-title\">Start Streamlining Today</h3>\n            <div className=\"inline-block bg-gradient-to-r from-accent to-primary text-white rounded-2xl p-8\">\n              <h4 className=\"text-xl font-bold mb-2\">Business Plan</h4>\n              <div className=\"text-4xl font-bold mb-4\" data-testid=\"text-pricing-amount\">\n                $199\n                <span className=\"text-lg font-normal\">/month</span>\n              </div>\n              <Button \n                onClick={() => setShowDemoModal(true)}\n                className=\"bg-white text-accent px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n                data-testid=\"button-get-started\"\n              >\n                Book Demo & Get Started\n              </Button>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      <DemoModal open={showDemoModal} onOpenChange={setShowDemoModal} />\n    </div>\n  );\n}\n","size_bytes":6701},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}